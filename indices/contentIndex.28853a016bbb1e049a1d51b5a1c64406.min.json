{"/":{"title":"ü™¥ ytreza.dev","content":"Bienvenue sur mon blog.\n\nJe m'appelle Jonathan LAURENT et je vais partager avec toi les diff√©rentes connaissances que j'ai accumul√©.\n\nTu peux voir :\n- [[/blog|mon blog]]\n- [[/kata|la liste des katas]]\n- [[/wiki|le wiki]]\n- [[dojo/pr√©sentation|Le dojo ytreza.dev]]\n\nSi tu veux me contacter : \n- par mail : contact@ytreza.dev\n- twitter : https://twitter.com/Johjo07\n- linkedin : https://www.linkedin.com/in/jonathan-laurent/","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/Cr%C3%A9er-une-application-todolist":{"title":"Cr√©er une application todolist","content":"Je suis actuellement en train de me former √† [[wiki/rust|rust]] ainsi qu'au [[wiki/DDD|ddd]]. J'ai donc d√©cid√© de d√©marrer une s√©rie de billets de blog. Je d√©taillerai ma d√©marche au fur et √† mesure.\n\nLes th√®mes abord√©s que j'ai actuellement en t√™te sont les suivants : \n- La m√©thode [[wiki/TDD|TDD]]\n- Le langage [[wiki/rust|rust]] et certaines de ses librairies\n\t- actix-web\n\t- serde\n- L'[[wiki/architecture hexagonale|architecture hexagonale]]\n- Le [[wiki/DDD|Domain Driven Design]] et ses patterns tactiques\n\t- comme l'[[wiki/event sourcing|event sourcing]]\n- et je ne sais quoi encore.\n\nCes billets me serviront pour me rappeler les d√©cisions que j'ai prise lorsque je travaillerai sur d'autres projets.\n\nIl est probable que je recommence ce projet plusieurs fois. L'id√©e n'√©tant pas de finir l'application, mais plut√¥t de cr√©er une application ayant une base de code propre, solide, qui r√©ponde √† mes crit√®res de qualit√©.\n\nLet's go !\n\nListe des billets : \n- [[blog/draft/todolist - la premi√®re fonctionnalit√©|la premi√®re fonctionnalit√©]]","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/Kata-Kumite-Koan-et-Dreyfus":{"title":"Kata, Kumite, Koan et Dreyfus","content":"# Kata, Kumite, Koan et Dreyfus\n\nExcellent article sur les notions de Kata, Kumite, Koan repris des arts martiaux (le karat√© dans l'article de r√©f√©rence) et la notation Dreyfus.\n\n## Kata\nLe \"ma√Ætre\" montre des mouvements et l'√©tudiant essaie de les recopier. Cette id√©e \nest int√©ressante au d√©but de l'apprentissage car l'√©tudiant ne connait pas encore le pourquoi.\n\nCependant, lorsque l'√©tudiant a atteint un certain niveau, il peut utiliser les katas pour s'approprier les mouvements.\n\n## Kumite\nDeux apprenants, ou le \"ma√Ætre\" et un apprenant travaillent ensemble. Cette √©tape est id√©ale lorsque l'apprenant ma√Ætrise des mouvements issus des katas. Si le kata est plut√¥t statique, le kumite permet d'avoir des encha√Ænements dynamique.\n\nL'apprenant doit apprendre √† ne plus se focaliser sur une seule chose. Il doit s'adapter √† chaque situation car il ne travaille plus seul.\n\n## Koan\nIci, la notion de koan est diff√©rente de celle que je connais.\n\nDans ma d√©finition, l'apprenant doit r√©soudre des probl√®mes √† trous. On peut le faire en proposant des tests unitaires d√©j√† √©crits (√©tape RED) et les faire passer (√©tape GREEN).\n\nDans l'article, ce sont plut√¥t des questions que l'on se pose. Celles-ci n'ont pas forc√©ment de meilleure r√©ponse. La r√©ponse n'est d'ailleurs pas importante. C'est surtout la question et la r√©flexion qu'elle engendre qui ont de l'importance.\n\n## Notation Dreyfus\nLa notation Dreyfus est constitu√©e de 5 √©tapes dans l'acquisition des comp√©tences : \n\n1.  Novice\n2.  D√©butant avanc√©\n3.  Comp√©tent\n4.  Efficace\n5.  Expert\n\nD'apr√®s l'article, on d√©marre √† l'√©tape de Novice. A ce stade, on ne comprend pas forc√©ment le pourquoi.\n\nDans les 3 √©tapes qui suivent, l'apprenant comprend de mieux en mieux et devient de plus en plus autonome. \n\nLorsqu'il devient un expert, la comp√©tence est inscrite au coeur de la personne et peut se fier √† son intuition plut√¥t qu'aux r√®gles qui d√©finissent la comp√©tence. Au contraire, elle peut red√©finir et am√©liorer la comp√©tence.\n\n\n## R√©f√©rences\n- http://codekata.com/kata/kata-kumite-koan-and-dreyfus/","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/Ma%C3%AEtriser-les-refactorings-de-base":{"title":"Ma√Ætriser les refactorings de base","content":"A force de pratiquer le refactoring, j'ai constat√© une chose. La loi de pareto s'applique. Voyons voir ce que cela signifie.\n\n20 % (voire moins) des patterns de refactoring concerne 80 % (voir plus) des actions de refactoring que je pratique. Ce sont des refactorings de bases.\n\nVoici la liste : \n- [[wiki/extract variable|extract variable]] / [[wiki/inline variable|inline variable]]\n- [[wiki/extract parameter|extract parameter]] / [[wiki/inline parameter|inline parameter]]\n- [[wiki/extract method|extract method]] / [[wiki/inline methode|inline method]]\n- [[wiki/extract class|extract class]]\n\n## Comment apprendre ces diff√©rents refactoring ?\nJ'ai appris ces diff√©rents refactorings en pratiquant des [[wiki/kata|katas]] et en m'attardant sur le refactoring step by step.\n\nMon conseil, essaye de pratiquer pendant 1 mois 2 (voire 3 ou 4) katas diff√©rents jusqu'√† les ma√Ætriser.\n- tu y passes 30 minutes par jour\n- si tu bloques, tu jettes le code et tu recommences\n- lorsque tu recommences, tu peux essayer de faire diff√©rement\n- tu demandes l'avis des autres\n- tu regardes comment font les autres\n\nSi tu fais cet effort, je suis certain que tu en seras r√©compens√©.\n\nBon courage !","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/Spectral-petit-pi%C3%A8ge-lorsquon-v%C3%A9rifie-quun-vecteur-contient-un-str-au-lieu-dun-string":{"title":"Spectral - petit pi√®ge lorsqu'on v√©rifie qu'un vecteur contient un str au lieu d'un string","content":"---\n\nLorsqu'on utilise spectral et que l'on veut v√©rifier qu'un `Vec` contient bien une `String`, on peut parfois aller trop vite et √©crire le code suivant : \n\n```rust\n#[cfg(test)]  \nmod test {  \n    use spectral::prelude::*;  \n  \n    #[test]  \n    fn test_spectral_with_vec() {  \n        let v = vec![\"abc\".to_string(), \"def\".to_string()];  \n        assert_that!(v).contains(\"abc\");  \n    }  \n}\n```\n\nLorsqu'on execute le test, on obtient cette erreur, qui est assez indigeste.\n\n```\nerror[E0277]: the trait bound `\u0026str: Borrow\u003cString\u003e` is not satisfied\n  --\u003e src\\main.rs:8:34\n   |\n8  |         assert_that!(v).contains(\"abc\");\n   |","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/TDD-la-Technique-du-Double-Dragon":{"title":"TDD - la Technique du Double Dragon","content":"La technique du double dragon, aussi appel√©e la technique de la triche constante, ou la technique du double code m'a permis de me simplifier la vie dans la pratique du Test Driven Development. \n\n## TL;DR\n\nSi tu n'as pas le temps de lire tout l'article, je te montre un exemple de la technique dans cette vid√©o, sur le kata prime factor en python : \n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iP7FW1PPdVo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Les principes\n\n## Pourquoi cette technique ?\nLorsque je code, je vise la fluidit√© maximale, c'est √† dire que mon taux d'interruption pour savoir quel code √©crire doit √™tre minimal. Je ne veux pas qu'apr√®s avoir √©crit un test, je me demande comment le faire passer. Pour arriver √† cela, la phase Green doit √™tre la plus rapide possible, de l'ordre de la diazine de secondes, √©criture du code comprise.\n\nBien s√ªr, il y a des limites. Avec un langage tr√®s verbeux, ce temps est rallong√©. La complexit√© du code et l'architecture que l'on utilise impacte aussi la fluidit√©. \n\nQuoiqu'il en soit, mes premi√®res exp√©rimentations me donnent l'impression d'√™tre litt√©ralement guid√© par les tests. Ma r√©flexion est minimale lors de l'√©tape Green. Au contraire, c'est plut√¥t m√©canique car j'ai une petite liste de r√®gles que j'applique pour faire √©voluer le code.\n\n## Comment √ßa fonctionne ?\nAvant d'aller plus loin dans le fonctionnement (d√©sol√© pour le teasing), il faut d√©j√† conna√Ætre les principes que j'applique. Je vais essayer de les r√©sumer en quelques mots.\n\nElle repose sur les principes suivants : \n- Red - Green - Refactoring\n- Transformation Priority Premise (TPP)\n- La ma√Ætrise du code\n- Les baby steps\n- La triche\n- La clarification\n- La mise en √©vidence de la duplication\n- La suppression de la duplication\n- Le copier / coller\n\n### Red - Green - Refactoring\nC'est le principe m√™me de TDD. Si tu ne le connais pas, je t'invite √† √©tudier cette m√©thode avant de poursuivre l'article, car tout repose dessus.\n\n- Red : On pose un test qui √©choue\n- Green : On √©crit le code de production qui fait passer ce test\n- Refactoring : On retravaille le code de test et de production pour l'am√©liorer \n\nL'√©tape Green est souvent tr√®s compliqu√©e pour les d√©vellopeur.e.s parce qu'il faut trouver le code √† √©crire. J'ai constat√© que l'on passe parfois un long temps de r√©fl√©xion pour valider l'√©tape Green. Je pense qu'au contraire, cette √©tape devrait √™tre la plus rapide possible.  \n\nL'√©tape Red consiste √† faire appara√Ætre les concepts du code au moyen des tests. Si l'on s'y prend mal, on peut en faire appara√Ætre plusieurs en m√™me temps. Dans ce cas, la phase Green devient plus complexe. Il faut prendre du temps pour √©crire le test qui introduit le moins de concept possible par rapport au code actuel.\n\nL'√©tape Refactoring consiste √† retravailler le code. On va faire √©voluer la structure du code (et non pas le comportement) pour se simplifier la vie. Une grosse part de la r√©fl√©xion doit se trouver ici.\n\nL'une des erreurs que je rencontre souvent, c'est de pratiquer la phase Refactoring en m√™me temps que la phase Green. Le d√©veloppeur cherche √† √©crire un code avec la meilleure structure possible du premier coup. \n\nBien qu'on puisse appliquer des r√®gles pr√©cises, la structure du code peut √©voluer dans plusieurs directions. Les TPP (transformation priority premise) nous aident √† choisir une structure coh√©rente. \n\n### TPP - Transformation Priority Premise\n\nLes TPP, c'est une liste √©crite par Robert C. Martin aka Uncle Bob. Elle indque  les transformations que l'on peut appliquer au code afin de le faire √©voluer. Elles sont ordonn√©es par priorit√© d'utilisation. Plus on descend dans la liste, plus les transformations rendent le code g√©n√©rique.\n\nIl est tr√®s important de ma√Ætriser cette liste. Si tu ne connais pas, je t'invite √† te renseigner dessus. Je trouve qu'il y a tr√®s peu de publications √† ce sujet. Ce qui est dommage car le concept n'a pas √©t√© assez pouss√©.\n\nIl vaut mieux lire l'article suivant avant de continuer : https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html\n\nPour moi, cette liste est incompl√®te mais elle reste fondamentale et je retarde au maximum l'application de certaines transformations. On a tendance √† les utiliser lors de l'√©tape Green.  Pour ma part, **je les applique lors de l'√©tape du refactoring**.\n\nJ'applique quelque chose qui ressemble √† √ßa : \n- Constante : j'indique la valeur attendue\n- Variable : j'extrais une variable depuis une constante\n- D√©composition : Si la variable est construite √† partir de plusieurs valeurs, je la d√©compose\n```\nword = \"fizzbuzz\"\n```\n\ndonne \n```\nword = \"\"\nword += \"fizz\"\nword += \"buzz\"\n```\n- Variable un peu plus complexe : j'introduis √† ce stade un tableau ou une map\n- Condition : j'ajoute une condition, parfois avec un else\n- Fonction : lorsque un concept appara√Æt clairement, je fais un extract m√©thode. Cette √©tape est subtile. Trop t√¥t et le code devient plus compliqu√© √† faire √©voluer, trop tard et on perd du temps √† cause de la duplication de code\n- Boucle: J'attend le dernier moment pour faire appara√Ætre une boucle. En g√©n√©ral, les tests ne vont que sur quelques it√©rations. Dans ce cas, un simple copier coller du traitement d'une it√©ration permet de traiter un √©l√©ment de plus\n\nCette liste n'est pas exhaustive, c'est un ordre d'id√©e. Tout d√©pend du code sur lequel on travaille. L'entra√Ænement permet de la faire √©voluer et de mieux g√©rer les transformations. Et je le r√©p√®te, on transforme √† l'√©tape du refactoring (ou du green si c'est √©vident).\n\n### La ma√Ætrise du code\nCe principe est l'un des piliers du d√©veloppement que chaque d√©veloppeur.e devrait ma√Ætriser. Mais qu'est-ce que c'est ?\n\nC'est tout simplement la capacit√© de se passer de debugger. Le code est un ensemble d'actions qui sont effectu√©es selon certaines conditions. Lorsqu'on √©crit un test, on attend un r√©sultat. Celui-ci est en g√©n√©ral obtenu √† partir d'un ensemble de transformations (je ne parle pas des TPP ici) que l'on appelle instruction. Tu dois √™tre en mesure de pouvoir dire en permanence o√π ces transformations ont lieu, sinon, tu n'as pas la ma√Ætrise du code.\n\nCette comp√©tence n'est pas simple √† acqu√©rir, mais elle est primordiale. Pour la ma√Ætriser, voici quelques conseils : \n- Diminue, voire interdit l'utilisation du debugger\n- Extrais les bonnes abstractions au bon moment\n- Suis les TPP et ne rend pas ton code trop g√©n√©rique trop t√¥t\n\n### Les baby-steps\nSi l'on souhaite coder de mani√®re fluide, ce principe est incontournable. Comme son nom l'indique, il consiste √† faire des pas de b√©b√© dans le code. Mais qu'est-ce que cela signifie r√©ellement ?\n\nLe code doit √™tre valid√© d√®s qu'il est √©crit. On √©vite donc d'√©crire de trop gros morceaux et on v√©rifie que tout fonctionne d√®s qu'une simple ligne de code est √©crite, voire un simple mot. Pour le valider, on lance tout simplement les tests.\n\nEn fait, si on r√©fl√©chit bien, **on n'a pas invent√© les baby-steps pour faire du TDD, on a invent√© TDD pour faire des baby-steps**. Et j'ai mis au point ma technique pour me permettre de faire les pas les plus petits possible.\n\nMais pourquoi les baby-steps sont-ils aussi importants ? Tout simplement parce qu'ils permettent d'√©viter l'effet tunnel, ce moment o√π on plonge la t√™te dans le code et qu'on se rend compte qu'il s'est pass√© un mois avant d'obtenr un code qui marche.\n\nJe veux un code qui marche en moins de 30 secondes. Parce que si je me suis plant√©, je ne jette que 30 secondes de travail. Si mon code marche, je peux le publier au bout de 30 secondes.\n\nEt cela marche parce que le code peut √©voluer de mani√®re incr√©mentale. C'est vraiment un concept de l'informatique que j'adore, cette possibilit√© de faire √©voluer les choses au fur et √† mesure et d'ajuster au bout de quelques secondes.\n\n### La triche\nCette technique, tr√®s pratiqu√©e lorsqu'on fait du TDD, est pour moi de la triche. Elle permet de terminer l'√©tape Green de TDD tr√®s rapidement. Elle est √† la base de ma technique. Voyons voir en quoi elle consiste.\n\nL'id√©e g√©n√©rale du d√©veloppement consiste √† effectuer un traitement sur des donn√©es en entr√©e pour obtenir des sorties. Lorsqu'on pratique TDD, le test met en √©vidence une entr√©e et la sortie attendue. Tricher consiste tout simplement √† retourner directement la sortie, quitte √† mettre une condition bas√©e sur l'entr√©e.\n\nPar exemple, dans le cas du fizzbuzz : \n\n```python\ndef fizzbuzz(number):\n\t# je triche ici\n\tif number == 15:\n\t\treturn \"fizzbuzz\"\n\n\t# reste du code\n```\n\nC'est tout simple, mais √ßa fait gagner beaucoup de temps. Et si tu lis mes autres articles, cette technique permet d'aller beaucoup plus loin avec la clarification.\n\n### La clarification\nLa clarification se r√©alise lors de l'√©tape du Refactoring. Elle consiste tout simplement √† comprendre ce que repr√©sente une valeur et √† indiquer d'o√π elle vient. Clarifier consiste souvent √† appliquer une des TPP (jusqu'√† ajouter une condition incluse).\n\nLa clarification va de pair avec la ma√Ætrise du code, car il faut parfaitement comprendre le code pour savoir ce que repr√©sente quoi.\n\nPar exemple, dans le cas du kata bowling o√π l'on calcule un score, on triche en renvoyant le score puis on clarifie le calcul du score.\n```python\nclass Bowling:\n\tdef score(self):\n\t\tif self.rolls == [1, 2] # La liste est beaucoup plus longue\n\t\t\treturn 3\n```\n\nQue repr√©sente ce `3`  ?\n```python\nclass Bowling:\n\tdef score(self):\n\t\tif self.rolls == [1, 2] # La liste est beaucoup plus longue\n\t\t\treturn 1 + 2\n```\n\nQue repr√©sentent ce `1`  et ce `2`?\n```python\nclass Bowling:\n\tdef score(self):\n\t\tif self.rolls == [1, 2] # La liste est beaucoup plus longue\n\t\t\treturn self.rolls[0] + self.rolls[1]\n```\n\n### La mise en √©vidence de la duplication\nDans un morceau de code, il arrive souvent qu'il y ait de la duplication de code, mais il arrive parfois que cette duplication ne soit pas visible. Il faut alors la mettre en √©vidence.\n\nPar exemple, dans le cas de fizzbuzz :\n\n```python\ndef fizzbuzz(number):\n\tif number % 15 == 0:\n\t\treturn \"fizzbuzz\"\n\tif number % 3 == 0\n\t\treturn \"fizz\"\n\tif number % 5 == 0\n\t\treturn \"buzz\"\n\t... \n```\n\nDans le code suivant, les termes fizz et buzz apparaissent plusieurs fois. Faire appara√Ætre la duplication revient √† d√©composer : \n\n```python\ndef fizzbuzz(number):\n\tif number % 15 == 0:\n\t\tword = \"\"\n\t\tword += \"fizz\"\n\t\tword += \"buzz\"\n\t\treturn word\n\tif number % 3 == 0\n\t\tword = \"\"\n\t\tword += \"fizz\"\n\t\treturn word\n\tif number % 5 == 0\n\t\tword = \"\"\n\t\tword += \"buzz\"\n\t\treturn word\n\t... \n```\n\nApr√®s d√©composition, les blocs se ressemblent beaucoup plus. Le refactring *extract variable* et la *d√©composition* sont deux techniques que j'utilise pour mettre en √©vidence la duplication.\n\n### La suppression de la duplication\nApr√®s avoir mis en √©vidence qu'il y a du code dupliqu√©, on peut supprimer la duplication. Bien entendu, quand on parle de supprimer la duplication, il faut le prendre avec des pincettes. Il n'est pas n√©cessaire de partir √† la chasse √† la duplication.\n\nDans l'exemple pr√©c√©dent du *fizzbuzz*, la premi√®re version de l'algorithme est satisfaisante, mais la seconde version permet d'arriver sur un code plus g√©n√©rique qui aura vocation √† √©voluer plus facilement, √† condition qu'on extrait les bonnes abstractions.\n\nLa mise en √©vidence comme la suppression de la duplication n√©cessitent de l'entra√Ænement et de l'exp√©rience pour √™tre ma√Ætris√©s.\n\n### Le copier-coller\nLe copier-coller est une des merveilles apport√©es par l'√®re de l'informatique. Je te conseille de l'utiliser sans arr√™t. En l'utilisant, tu mets en √©vidence qu'il y a de la duplication.\n\n## La technique du double dragon\nAlors, en quoi consiste cette fameuse technique ? Tout simplement √† appliquer tous les principes √©nonc√©s plus haut en m√™me temps.\n\nJe vous fait en parall√®le un exemple avec le minesweeper.\n\nOn commence par appliquer *Red - Green - refactoring* afin de cr√©er le walking skeleton du code. On utilise ensuite ce processus tout le reste du d√©veloppement. Pour la r√©solution du premier test, on suit les TPP, et on commence par √©crire un code qui ne fait rien puis un code qui renvoie une constante.\n\n```python\ndef test_solve_an_empty_field():\n    assert minesweeper(\"\") == \"\"\n\ndef minesweeper(field):\n    return \"\"\n```\nUne fois qu'on a fait passer notre premier test, notre deuxi√®me test arrive. On peut commencer √† appliquer la technique du double dragon (j'adore ce nom). Il suffit tout simplement de tricher.\n\n```python\ndef test_solve_a_cell_with_mine():\n    assert minesweeper(\"*\") == \"*\"\n    \ndef minesweeper(field):\n\t# La triche commence ici\n\tif field == \"*\":\n        return \"*\"\n\n\t# Le code g√©n√©rique commence ici\n\treturn \"\"\n```\n\nLa triche est mise en place gr√¢ce √† la condition `if field == \"*\":`. Ici, cette condition n'a rien √† voir avec les TPP. Ce n'est pas une transformation du code, c'est de la triche. Mais cela nous permet de passer l'√©tape du *Green* tr√®s rapidement.\n\nSuivant les cas, on peut parfois se retrouver avec plusieurs cas de triche afin de mieux comprendre le code.\n\nOn va maintenant appliquer la mise en *√©vidence de la duplication* avec un *extract variable* et la *d√©composition*.\n\n```python\ndef minesweeper(field):\n\t# La triche commence ici\n    if field == \"*\":\n        solved_field = \"\"\n        solved_field += \"*\"\n        return solved_field\n\n\t# Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    return solved_field\n```\n\nLa duplication est visible, mais pas assez, on va la mettre encore plus en √©vidence.\n\n```python\ndef minesweeper(field):\n    # La triche commence ici\n    if field == \"*\":\n        solved_field = \"\"\n        if True:\n            solved_field += \"*\"\n        return solved_field\n    \n    # Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    if False:\n        solved_field += \"*\"\n\n    return solved_field\n```\n\nOn applique une TPP de priorit√© moins grande, l'ajout d'une condition car on n'a pas le choix. (Si quelqu'un sait faire passer cette √©tape sans le if, je suis preneur)\n\nLe *True* et le *False* sont l√† pour nous permettre de faire des baby steps. J'ai donc un copier-coller de mon code de triche et de mon cod√© g√©n√©rique. Il faut chercher une condition (pas forc√©ment la vraie condition) qui marche dans les deux cas.\n\nDans le cas pr√©sent, c'est une condition sur la taille de la cha√Æne qui fonctionne.\n\n```python\ndef minesweeper(field):\n    # La triche commence ici\n    if field == \"*\":\n        solved_field = \"\"\n        if len(field) \u003e 0:\n            solved_field += \"*\"\n        return solved_field\n    \n    # Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    if len(field) \u003e 0:\n        solved_field += \"*\"\n\n    return solved_field\n```\n\nLa technique du double dragon est en place. Nous pouvons passer au test suivant.\n\n```python\ndef test_solve_a_cell_without_mine():\n    assert minesweeper(\".\") == \"0\"\n```\n\nEt le code qui fait passer ce test : \n\n```python\ndef minesweeper(field):\n    # La triche commence ici\n    if field == \".\":\n        solved_field = \"\"\n        if len(field) \u003e 0:\n            solved_field += \"0\"\n        return solved_field\n    \n    # Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    if len(field) \u003e 0:\n        solved_field += \"*\"\n\n    return solved_field\n```\nLa premi√®re chose √† comprendre, c'est que j'ai recycl√© le bloc de triche. J'ai remplac√© la condition pour √™tre dans le cas du nouveau test.\n\nLa seconde chose, c'est que j'ai ajout√© ce qu'il faut dans le code pour que √ßa passe automatiquement. Je n'ai pas cherch√© √† √©crire le bon code directement. J'ai cherch√© ce qu'il fallait changer dans le code existant pour que le test passe. \n\nCe changement nous donne d'ailleurs des informations sur la TPP que l'on va choisir pour r√©aliser le code.\n\nJe met en √©vidence la duplication en utlisant la technique du *True* et *False* : \n```python\ndef minesweeper(field):\n    # La triche commence ici\n    if field == \".\":\n        solved_field = \"\"\n        if len(field) \u003e 0:\n            if True:\n                solved_field += \"0\"\n            else:\n                solved_field += \"*\"\n        return solved_field\n    \n    # Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    if len(field) \u003e 0:\n        if False:\n            solved_field += \"0\"\n        else:\n            solved_field += \"*\"\n\n    return solved_field\n```\n\nPuis j'enl√®ve la duplication en trouvant la bonne condition : \n```python\ndef minesweeper(field):\n    # La triche commence ici\n    if field == \".\":\n        solved_field = \"\"\n        if len(field) \u003e 0:\n            if field[0] != \"*\" :\n                solved_field += \"0\"\n            else:\n                solved_field += \"*\"\n        return solved_field\n    \n    # Le code g√©n√©rique commence ici\n    solved_field = \"\"\n    if len(field) \u003e 0:\n        if field[0] != \"*\" :\n            solved_field += \"0\"\n        else:\n            solved_field += \"*\"\n\n    return solved_field\n```\nLes deux codes √©tant align√©s, je peux maintenant passer au test suivant et ainsi de suite. Je recycle le code de triche √† chaque fois, c'est lui qui √©volue.\n\nA noter que dans certains cas, il peut y avoir plusieurs √©tapes avant de pouvoir aligner le code de triche et le code g√©n√©rique.\n\n## Exemple \n\nVoici un exemple de la technique du double dragon en python sur le kata prime factor : \n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iP7FW1PPdVo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\nVoici un second exemple. En fait, c'est durant cet exercice que j'ai finalis√© la technique du double dragon.\n\nJe l'effectue sur le kata minesweeper en rust : \n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-VSavtR5aCY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\nLe code de ce dernier kata est accessible sur cyberdojo avec chaque √©tape ici : [acc√©der au code]([https://cyber-dojo.org/kata/edit/aR5mXj](https://www.youtube.com/redirect?event=video_description\u0026redir_token=QUFFLUhqbngzZTBOV2cxYVlwQ0xEcVgycG40X0RhQkZDZ3xBQ3Jtc0tubWlJWVFEdU1oYUVYdFVJRDNCVjg4WnFhOEQ3Sko2VlkwdlljWnRWdUhXX1ZSeXROYzNSRlVQeW5YUUFUemlweXhINnhPM3lzb283LXlXVVpvbEEtZ1ctZmEzSmg1NUlCaml0QUhpYThwM2pqWC14NA\u0026q=https%3A%2F%2Fcyber-dojo.org%2Fkata%2Fedit%2FaR5mXj\u0026v=-VSavtR5aCY))","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/cmd-Envoyer-des-commandes-%C3%A0-une-application-cli":{"title":"cmd : Envoyer des commandes √† une application cli","content":"Cr√©er un fichier command.txt qui contient les commandes \n\n```\nload(\"hello\")\nmain()\nq\n```\n\npuis lancer les commandes avec \n```\ncclaire.exe \u003c command.txt\n```\n\n\n\n## R√©f√©rences\n* https://stackoverflow.com/questions/10552812/defining-and-using-a-variable-in-batch-file","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/etude-du-kata-bowling-one-test":{"title":"Etude du kata bowling (en un seul test)","content":"## Introduction\n\nDans cette √©tude de kata, nous allons nous attarder sur une technique cl√© de *TDD*, la **technique de la triche**. Cette pratique, qui peut para√Ætre *douteuse*, est en fait l'un des principes fondamentaux qui permet de se laisser guider lorsqu'on fait du *TDD*.\n\nC'est un concept cl√© de *TDD*, il est donc **important de bien conna√Ætre TDD** avant d'utiliser cette technique. Cependant, elle est tr√®s int√©ressante parce qu'il y a un c√¥t√© magique dans cette m√©thode.\n\nCette technique se focalise sur les √©tapes **GREEN** et **Refactoring** de *TDD*. C'est pourquoi nous allons travailler avec un seul test (amplement suffisant pour cet exercice). Ce ne sera donc pas du TDD traditionnel... (du TDD avec un seul test ? ce n'est pas du TDD, quoique...).\n\nLa technique permet de **passer de l'√©tape RED √† l'√©tape GREEN tr√®s rapidement**, nous nous attarderons donc quelques secondes sur ces √©tapes. Nous passerons par contre plus de temps dans la phase de **Refactoring**, en particulier sur une √©tape que j'appelle la clarification et qui se situe √† cheval sur les √©tapes **GREEN** et **Refactoring**.\n\nPour mettre en avant le concept, je te propose le [[kata/bowling|kata bowling]]. Je te conseille de l'avoir pratiqu√© au moins une fois avant de commencer, mais ce n'est pas obligatoire.\n\n**Il est tr√®s important de noter que je lance l'unique test √† chaque modification de code pour √™tre s√ªr que tout fonctionne**. Si tu produis l'exercice, il est important que tu le fasses aussi.\n\nLa premi√®re √©tape consiste √† mettre en place le test du bowling, je t'invite √† survoler rapidement cette section si tu connais d√©j√† le kata (mais tu dois au moins √©tudier le code du test). La partie int√©ressante commence dans la deuxi√®me partie concernant la triche.\n\nEnfin, **le code est pr√©sent√© en mode diff**. Les `+` indiquent le code qui a √©t√© ajout√© et les `-` le code qui a √©t√© enlev√©.\n\n## Mise en place du (seul) test\n\nTout commence donc par un test (le seul test de cette √©tude). \n\n```diff\n+import bowling.Bowling;  \n+import org.junit.Test;  \n+  \n+public class TestBowling {  \n+  \n+    @Test  \n+    public void one_game() {  \n+        Bowling game = new Bowling();  \n+    }  \n+  \n+}\n```\n\nDans l'√©tat, nous sommes donc √† l'√©tape RED, le test √©choue car la classe Bowling n'existe pas. Cr√©ons donc la classe qui va avec :\n\n```diff\n+package bowling;  \n+  \n+public class Bowling {  \n+}\n```\n\nEt nous passons au vert.\n\nNous allons maintenant jouer au bowling. La m√©thode `roll` doit permettre d'indiquer le nombre de quilles que l'on fait tomber √† chaque lancer.\n\nOn rajoute donc au test tous les lancers n√©cessaires pour faire une partie. Il y a des strikes , des spares, des coups normaux... Bref, c'est le genre de partie que je joue quand je suis chanceux ;)\n\n```diff\n@Test  \npublic void one_game() {  \n    Bowling game = new Bowling();  \n  \n+   game.roll(3);  \n+   game.roll(4);  \n+   game.roll(6);  \n+   game.roll(3);  \n+   game.roll(2);  \n+   game.roll(8);  \n+   game.roll(4);  \n+   game.roll(3);  \n+   game.roll(4);  \n+   game.roll(4);  \n+   game.roll(5);  \n+   game.roll(2);  \n+   game.roll(6);  \n+   game.roll(4);  \n+   game.roll(10);  \n+   game.roll(8);  \n+   game.roll(0);  \n+   game.roll(10);  \n+   game.roll(8);  \n+   game.roll(1);  \n  \n}\n```\n\nEt on passe du *RED* au *GREEN* en ajoutant la m√©thode `roll` dans la classe `Bowling`.\n\n```diff\npublic class Bowling {  \n+    public void roll(int pin) {  \n+  \n+    }  \n}\n```\n\nEnfin, on v√©rifie que le score calcul√© est le bon : \n\n```diff\n@Test  \npublic void one_game() {  \n    Bowling game = new Bowling();  \n  \n    game.roll(3);  \n    game.roll(4);  \n    game.roll(6);  \n    game.roll(3);  \n    game.roll(2);  \n    game.roll(8);  \n    game.roll(4);  \n    game.roll(3);  \n    game.roll(4);  \n    game.roll(4);  \n    game.roll(5);  \n    game.roll(2);  \n    game.roll(6);  \n    game.roll(4);  \n    game.roll(10);  \n    game.roll(8);  \n    game.roll(0);  \n    game.roll(10);  \n    game.roll(8);  \n    game.roll(1);  \n  \n+   Assert.assertEquals(117, game.score());  \n}\n```\nOn tombe sur une erreur de compilation (√©tape *RED*), on cr√©e la m√©thode `score` et on fait √©chouer l'assert (toujours *RED*): \n\n```diff\npublic class Bowling {  \n    public void roll(int pin) {  \n  \n    }  \n  \n+   public int score() {  \n+       return -1;  \n+   }  \n}\n```\n\nEt voil√†, on peut rentrer dans le vif du sujet, on a fini de mettre en place nos tests. Nous allons pouvoir tricher all√®grement.\n\n## Je triche, tu triches, nous trichons\nLe passage au vert se fait de la mani√®re la plus simple, en indiquant le r√©sultat attendu.\n\n```diff\npublic int score() {  \n-   return -1;  \t\n+   return 117;  \n}  \n```\nOn passe de l'√©tape *RED* √† l'√©tape *GREEN* en 2 secondes. Voil√†, nous venons de pratiquer ce que j'appelle la **triche**. Indiquer directement dans le code le r√©sultat attendu.\n\n√Ä partir de maintenant, nos tests doivent toujours passer. Nous entrons dans la phase du *REFACTORING*. Et nous n'en ressortirons pas tant que notre algo ne sera pas termin√©.\n\n## Clarifions... Quoi ? Comment ?\n\u003e - Novice : C'est bien beau ce 117, mais je ne vois pas d'algo l√†-dedans      \n\u003e - Expert : C'est vrai, mais pourtant, l'algo est l√†, mais tu ne le vois pas encore      \n\u003e - Novice : ???     \n\u003e - Expert : Petite question, c'est quoi ce 117 ?     \n\u003e - Novice : 117 ? C'est le score total de ma partie de bowling...     \n\nBingo ! Nous venons d'attaquer la phase de **clarification** qui est une √©tape de la phase de *REFACTORING*. Nous sommes en train de parler du **QUOI**. Et cela nous permet d'introduire un nouveau concept : le score total de la partie (bon, je sais, la m√©thode s'appelle score, c'√©tait facile...). \n\nMettons en √©vidence ce nouveau concept, √† l'aide d'un [[wiki/extract variable|extract variable ]]: \n\n```diff\npublic int score() {  \n-   return 117;  \n+   int score = 117;  \n+   return score;  \n}\n```\n\n\u003e - Novice : Tu as toujours ce 117...\n\u003e - Expert : C'est vrai, mais comment arrive-t-on √† ce r√©sultat ?\n\u003e - Novice : Il faut ajouter le r√©sultat du premier lancer puis du second ....\n\u003e - Expert : C'est vrai, mais ton niveau d'abstraction est trop haut, c'est trop t√¥t pour en parler\n\u003e - Novice : ???  \n\u003e - Expert : Le r√©sultat du premier lancer, c'est 3 et le second, c'est 4  \n\u003e - Novice ???????  \n\u003e - Expert : 117, c'est √©gal √† 3 + 4 + 6 + ... + 10 + 8 + 1  \n\u003e - Novice : ?????????????????????  \n\u003e - Expert : Oui, pour calculer le score, il faut conna√Ætre les r√®gles du bowling et savoir faire le calcul √† la main\n\n\nSi on traduit cela en code, √ßa nous donne. En guide d'exercice, tu peux repartir de notre jeu de test et voir comment on calcule cela : \n\n```diff\npublic int score() {  \n-   int score = 117;  \n+   int score = 3 + 4 + 6 + 3 + 2 + 8 + 4 + 4 + 3 + 4 + 4 + 5 + 2 + 6 + 4 + 10 + 10 + 8 + 0 + 8 + 0 + 10 + 8 + 1;  \n    return score;  \n}\n```\n\nPour r√©ussir cela, nous avons introduit la notion de **COMMENT**. Mais attention, il ne faut pas changer de niveau d'abstraction trop rapidement. Si c'est possible, on introduit l'un apr√®s l'autre.\n\nOrganisons un peu le code pour faire appara√Ætre le **QUOI**.\n\n```diff\npublic int score() {  \n-   int score = 3 + 4 + 6 + 3 + 2 + 8 + 4 + 4 + 3 + 4 + 4 + 5 + 2 + 6 + 4 + 10 + 10 + 8 + 0 + 8 + 0 + 10 + 8 + 1;  \n\n+   int score = 0;  \n  \n+   score += 3;  \n+   score += 4; \n+   score += 6;  \n+   score += 3;  \n+   score += 2;  \n+   score += 8;  \n+   score += 4;  \n+   score += 4;  \n+   score += 3;  \n+   score += 4;  \n+   score += 4;  \n+   score += 5;  \n+   score += 2;  \n+   score += 6;  \n+   score += 4;  \n+   score += 10;  \n+   score += 10;  \n+   score += 8;  \n+   score += 0;  \n+   score += 8;  \n+   score += 0;  \n+   score += 10;  \n+   score += 8;  \n+   score += 1;  \n  \n    return score;  \n}\n```\n\nEt encore une √©tape (pour rappel, le test passe toujours) : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n+   // frame 1  \n    score += 3; // roll 1  \n    score += 4; // roll 2  \n\t  \n+   // frame 2  \n    score += 6; // roll 3  \n    score += 3; // roll 4  \n\t  \n+   // frame 3  \n    score += 2; // roll 5  \n    score += 8; // roll 6 (spare)  \n    score += 4; // roll 7 (spare bonus)  \n\t  \n+   // frame 4  \n    score += 4; // roll 7  \n    score += 3; // roll 8  \n\t  \n+   // frame 5  \n    score += 4; // roll 9  \n    score += 4; // roll 10  \n\t  \n+   // frame 6  \n    score += 5; // roll 11  \n    score += 2; // roll 12  \n\t  \n+   // frame 7  \n    score += 6; // roll 13  \n    score += 4; // roll 14 (spare) \n    score += 10; // roll 15 (spare bonus)   \n\t  \n+   // frame 8  \n    score += 10; // roll 15 (strike)  \n    score += 8; // roll 16 (strike bonus)  \n    score += 0; // roll 17 (strike bonus)  \n\t  \t  \n+   // frame 9  \n    score += 8; // roll 16  \n    score += 0; // roll 17   \n\t  \n+   // frame 10  \n    score += 10; // roll 18 (strike)  \n    score += 8; // roll 19 (strike bonus)  \n    score += 1; // roll 20 (strike bonus)\n  \n    return score;  \n}\n```\n\nEn s√©parant les diff√©rents lancers, nous faisons appara√Ætre la notion de *frame*, l'un des concepts du bowling. Nous introduisons aussi la notion de strike et de spare ainsi que les bonus respectif.\n\n## Clarifions un peu plus\n\u003e - Novice : tu veux encore clarifier ?  \n\u003e - Expert : oui, mais cette fois, c'est pour enlever de la duplication  \n\u003e - Novice : de la duplication ??  \n\u003e - Expert : oui, ces nombres : 3, 4, 6, etc... on les retrouve aussi dans le test   \n\u003e - Novice : ah oui, c'est vrai... et je suppose que ce sont les m√™mes concepts ?  \n\u003e - Expert : oui, chaque nombre repr√©sente le nombre de quilles tomb√©es lors d'un lancer.\n\nAllons chercher ces lancers. Ils sont d√©finis dans le test et sont introduits dans notre classe via la m√©thode `roll`.\n\nPour les avoir √† disposition dans notre m√©thode `score`, nous devons les stocker dans un attribut : \n\n```diff\npublic class Bowling {  \n+   List\u003cInteger\u003e rolls = new ArrayList\u003c\u003e();  \n  \n+   public void roll(int pins) {  \n+       rolls.add(pins);  \n+   }  \n  \n    public int score() {  \n        int score = 0;  \n  \n        // frame 1  \n        score += 3;  \n        score += 4;  \n  \n       // ...\n  \n        // frame 10\n        score += 10;  \n        score += 8;  \n        score += 1;  \n  \n        return score;  \n    }  \n}\n```\n\nNous allons maintenant pouvoir les utiliser : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n    // frame 1  \n-   score += 3; // roll 1  \n-   score += 4; // roll 2      \n+   score += rolls.get(0); // roll 1  \n+   score += rolls.get(1); // roll 2  \n  \n    // frame 2\n-   score += 6; // roll 3  \n-   score += 3; // roll 4    \n+   score += rolls.get(2); // roll 3  \n+   score += rolls.get(3); // roll 4  \n  \n    // frame 3\n-   score += 2; // roll 5  \n-   score += 8; // roll 6 (spare)  \n-   score += 4; // roll 7 (spare bonus)      \n+   score += rolls.get(4); // roll 5  \n+   score += rolls.get(5); // roll 6 (spare)  \n+   score += rolls.get(6); // roll 7 (spare bonus)  \n  \n    // frame 4\n-   score += 4; // roll 7  \n-   score += 3; // roll 8     \n+   score += rolls.get(6); // roll 7  \n+   score += rolls.get(7); // roll 8  \n  \n    // frame 5\n-   score += 4; // roll 9  \n-   score += 4; // roll 10    \n+   score += rolls.get(8); // roll 9  \n+   score += rolls.get(9); // roll 10  \n  \n    // frame 6\n-   score += 5; // roll 11  \n-   score += 2; // roll 12          \n+     score += rolls.get(10); // roll 11  \n+   score += rolls.get(11); // roll 12  \n  \n    // frame 7\n-   score += 6; // roll 13  \n-   score += 4; // roll 14 (spare) \n-   score += 10; // roll 15 (spare bonus)       \n+     score += rolls.get(12); // roll 13  \n+   score += rolls.get(13); // roll 14 (spare)  \n+   score += rolls.get(14); // roll 15 (spare bonus)    \n  \n    // frame 8\n-   score += 10; // roll 15 (strike)  \n-   score += 8; // roll 16 (strike bonus)  \n-   score += 0; // roll 17 (strike bonus)      \n+   score += rolls.get(14); // roll 15 (strike)  \n+   score += rolls.get(15); // roll 16 (strike bonus)  \n+   score += rolls.get(16); // roll 17 (strike bonus)  \n  \n  \n    // frame 9\n-   score += 8; // roll 16  \n-   score += 0; // roll 17      \n+   score += rolls.get(15); // roll 16  \n+   score += rolls.get(16); // roll 17  \n  \n  \n    // frame 10\n-   score += 10; // roll 18 (strike)  \n-   score += 8; // roll 19 (strike bonus)  \n-   score += 1; // roll 20 (strike bonus)-   \n+   score += rolls.get(17); // roll 18 (strike)  \n+   score += rolls.get(18); // roll 19 (strike bonus)  \n+   score += rolls.get(19); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003e - Novice : Et maintenant ? On fait quoi ?  \n\u003e - Expert : On continue d'enlever la duplication !   \n\u003e - Novice : √Ä part le rolls.get, je n'en vois pas...  \n\u003e - Expert : C'est pourquoi nous allons la mettre en √©vidence  \n\nPour mettre en √©vidence la duplication, il faut se servir de son instinct. Il n'y a pas de r√®gle permettant d'y arriver, mais je te propose √ßa : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n    // frame 1  \n    score += rolls.get(0); // roll 1  \n-   score += rolls.get(1); // roll 2  \n+   score += rolls.get(0 + 1); // roll 2  \n  \n    // frame 2\n    score += rolls.get(2); // roll 3  \n-   score += rolls.get(3); // roll 4  \n+   score += rolls.get(2 + 1); // roll 4  \n  \n    // frame 3\n    score += rolls.get(4); // roll 5  \n-   score += rolls.get(5); // roll 6 (spare)  \n-   score += rolls.get(6); // roll 7 (spare bonus)  \n+   score += rolls.get(4 + 1); // roll 6 (spare)  \n+   score += rolls.get(4 + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n    score += rolls.get(6); // roll 7  \n-   score += rolls.get(7); // roll 8  \n+   score += rolls.get(6 + 1); // roll 8  \n  \n    // frame 5    \n    score += rolls.get(8); // roll 9  \n-   score += rolls.get(9); // roll 10  \n+   score += rolls.get(8 + 1); // roll 10  \n  \n    // frame 6    \n    score += rolls.get(10); // roll 11  \n-   score += rolls.get(11); // roll 12  \n+   score += rolls.get(10 + 1); // roll 12  \n  \n    // frame 7    \n    score += rolls.get(12); // roll 13  \n-   score += rolls.get(13); // roll 14  \n-   score += rolls.get(14); // roll 15  \n+   score += rolls.get(12 + 1); // roll 14  \n+   score += rolls.get(12 + 2); // roll 15  \n  \n    // frame 8    \n    score += rolls.get(14); // roll 15 (strike)  \n-   score += rolls.get(15); // roll 16 (strike bonus)  \n-   score += rolls.get(16); // roll 17 (strike bonus)  \n+   score += rolls.get(14 + 1); // roll 16 (strike bonus)  \n+   score += rolls.get(14 + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n    score += rolls.get(15); // roll 16\n-   score += rolls.get(16); // roll 17        \n+   score += rolls.get(15 + 1); // roll 17  \n  \n  \n    // frame 10    \n    score += rolls.get(17); // roll 18 (strike) \n-   score += rolls.get(18); // roll 19 (strike bonus)  \n-   score += rolls.get(19); // roll 20 (strike bonus)  \n+   score += rolls.get(17 + 1); // roll 19 (strike bonus)  \n+   score += rolls.get(17 + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\nJ'exprime l'indice de chaque lancer en fonction du premier lancer du frame. Ce qui va nous permettre d'introduire la notion de *frame index*. Chaque *frame* commence √† son premier lancer. Le *frame index* correspond √† l'index de ce lancer. Voyons voir ce que √ßa donne : \n\n```diff\npublic int score() {  \n    int score = 0;  \n+   int frameIndex = 0;  \n  \n    // frame 1  \n-   score += rolls.get(0); // roll 1\n-   score += rolls.get(0 + 1); // roll 2\n+   frameIndex = 0;  \n+   score += rolls.get(frameIndex); // roll 1  \n+   score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   score += rolls.get(2); // roll 3\n-   score += rolls.get(2 + 1); // roll 4\n+   frameIndex = 2;  \n+   score += rolls.get(frameIndex); // roll 3  \n+   score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   score += rolls.get(4); // roll 5\n-   score += rolls.get(4 + 1); // roll 6 (spare)\n-   score += rolls.get(4 + 2); // roll 7 (spare bonus)    \n+   frameIndex = 4;  \n+   score += rolls.get(frameIndex); // roll 5  \n+   score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n+   score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   score += rolls.get(6); // roll 7\n-   score += rolls.get(6 + 1); // roll 8    \n+   frameIndex = 6;  \n+   score += rolls.get(frameIndex); // roll 7  \n+   score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   score += rolls.get(8); // roll 9\n-   score += rolls.get(8 + 1); // roll 10    \n+   frameIndex = 8;  \n+   score += rolls.get(frameIndex); // roll 9  \n+   score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   score += rolls.get(10); // roll 11\n-   score += rolls.get(10 + 1); // roll 12\n+   frameIndex = 10;  \n+   score += rolls.get(frameIndex); // roll 11  \n+   score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   score += rolls.get(12); // roll 13\n-   score += rolls.get(12 + 1); // roll 14\n-   score += rolls.get(12 + 2); // roll 15    \n+   frameIndex = 12;  \n+   score += rolls.get(frameIndex); // roll 13  \n+   score += rolls.get(frameIndex + 1); // roll 14  \n+   score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   score += rolls.get(14); // roll 15 (strike)\n-   score += rolls.get(14 + 1); // roll 16 (strike bonus)\n-   score += rolls.get(14 + 2); // roll 17 (strike bonus)\n+   frameIndex = 14;  \n+   score += rolls.get(frameIndex); // roll 15 (strike)  \n+   score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n+   score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   score += rolls.get(15); // roll 16\n-   score += rolls.get(15 + 1); // roll 17    \n+   frameIndex = 15;  \n+   score += rolls.get(frameIndex); // roll 16  \n+   score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   score += rolls.get(17); // roll 18 (strike)\n-   score += rolls.get(17 + 1); // roll 19 (strike bonus)\n-   score += rolls.get(17 + 2); // roll 20 (strike bonus)\n+   frameIndex = 17;  \n+   score += rolls.get(frameIndex); // roll 18 (strike)  \n+   score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n+   score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003e - Novice : Ah oui ! Je la vois maintenant. On fait une boucle ?  \n\u003e - Expert : Ton instinct te dit qu'il y a une boucle, mais c'est encore trop t√¥t.  \n\u003e - Novice : Pourquoi ? Les blocs se ressemblent !  \n\u003e - Expert : Ils se ressemblent, mais ils ne sont pas identiques. Il faut continuer √† clarifier.  \n\u003e - Novice : Qu'est-ce qu'on fait alors ?  \n\u003e - Expert : Ce que l'on fait depuis le d√©but, on clarifie puis on met en √©vidence la duplication.  \n\nEffectivement, il est trop t√¥t pour introduire une boucle. Clarifions le concept de `frameIndex` : \n\n```diff\npublic int score() {  \n    int score = 0;  \n    int frameIndex = 0;  \n  \n    // frame 1  \n    frameIndex = 0;  \n    score += rolls.get(frameIndex); // roll 1  \n    score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   frameIndex = 2;  \n+   frameIndex = 0 + 2;  \n    score += rolls.get(frameIndex); // roll 3  \n    score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   frameIndex = 4;  \n+   frameIndex = 2 + 2;  \n    score += rolls.get(frameIndex); // roll 5  \n    score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n    score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   frameIndex = 6;  \n+   frameIndex = 4 + 2;  \n    score += rolls.get(frameIndex); // roll 7  \n    score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   frameIndex = 8;  \n+   frameIndex = 6 + 2;    \n    score += rolls.get(frameIndex); // roll 9  \n    score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   frameIndex = 10;  \n+   frameIndex = 8 + 2;  \n    score += rolls.get(frameIndex); // roll 11  \n    score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   frameIndex = 12;  \n+   frameIndex = 10 + 2;  \n    score += rolls.get(frameIndex); // roll 13  \n    score += rolls.get(frameIndex + 1); // roll 14  \n    score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   frameIndex = 14;  \n+   frameIndex = 12 + 2;  \n    score += rolls.get(frameIndex); // roll 15 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   frameIndex = 15;\n+   frameIndex = 14 + 1;  \n    score += rolls.get(frameIndex); // roll 16  \n    score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   frameIndex = 17;  \n+   frameIndex = 15 + 2;  \n    score += rolls.get(frameIndex); // roll 18 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\nPuis mettons en √©vidence la duplication : \n\n```diff\npublic int score() {  \n    int score = 0;  \n    int frameIndex = 0;  \n  \n    // frame 1  \n    frameIndex = 0;  \n    score += rolls.get(frameIndex); // roll 1  \n    score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   frameIndex = 0 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 3  \n    score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   frameIndex = 2 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 5  \n    score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n    score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   frameIndex = 4 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 7  \n    score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   frameIndex = 6 + 2;    \n+   frameIndex = frameIndex + 2;    \n    score += rolls.get(frameIndex); // roll 9  \n    score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   frameIndex = 8 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 11  \n    score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   frameIndex = 10 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 13  \n    score += rolls.get(frameIndex + 1); // roll 14  \n    score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   frameIndex = 12 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 15 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   frameIndex = 14 + 1;  \n+   frameIndex = frameIndex + 1;  \n    score += rolls.get(frameIndex); // roll 16  \n    score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   frameIndex = 15 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 18 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003e - Novice : Et ensuite ?  \n\u003e - Expert : On va continuer de clarifier en introduisant la notion de bonus. On va de nouveau utiliser le refactoring Extract variable.\n\nLa notion de bonus appara√Æt lorsqu'on a un *strike* (les deux prochains lancers sont ajout√©s en bonus) ou lors d'un *spare* (le prochain lancer est ajout√© en bonus). On va donc faire un extract variable sur ce calcul pour faire appara√Ætre le concept.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n+   int bonus = 0;\n    \n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   score += rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n-   score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n-   score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n+   bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n     score += rolls.get(frameIndex + 1); // roll 17\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n-   score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n-   score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n+   bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   score += bonus;\n\n   return score;\n}\n```\n\n\u003e - Novice : C'est bien beau ce concept de bonus, mais on ne les voit pas dans tous les blocs !  \n\u003e - Expert : Et donc ?  \n\u003e - Novice : Les blocs se ressemblent moins apr√®s ta modification !  \n\u003e - Expert : Tu as tout √† fait raison, mais rien ne nous interdit d'introduire la notion de bonus pour les frames standard\n\nEn effet, nous avons un concept qui n'apparait que dans certains cas. Ce concept est assez simple et peut-√™tre repr√©sent√© dans notre algorithme. \n\n```diff\n    public int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n    bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n    bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n+   bonus = 0;\n+   score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n    bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n    bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n    score += bonus;\n\n    return score;\n}\n```\n\n\u003e - Novice : G√©nial ! Dans chaque bloc, on a une ligne qui se ressemble. Mais le bonus se calcule toujours diff√©rement...  \n\u003e - Expert : C'est vrai, apr√®s la clarification, mettons en √©vidence la duplication  \n\u003e - Novice : Pas facile...  \n\u003e - Expert : Dans quel cas le bonus est √©quivalent au prochain lancer ?  \n\u003e - Novice : Lorsqu'on fait un spare  \n\u003e - Expert : Et dans quel cas le bonus vaut les deux prochains lancers ?  \n\u003e - Novice : Lors d'un strike !  \n\u003e - Expert : Et pour un bonus de z√©ro ?  \n\u003e - Novice : Dans les autres cas !\n\nPour d√©tecter un *strike*, il faut v√©rifier la somme du premier lancer. S'il vaut `10`, c'en est un. Pour un *spare*, c'est la somme des deux lancers qui doit valoir `10`. Dans les autres cas, on n'a pas de bonus (ou un bonus qui vaut `0`).\n\nMettons en √©vidence la duplication : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n-   bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n-   bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n-   bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n-   bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n-   bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    return score;\n}\n```\n\n\u003e - Novice : Le code est beaucoup plus lourd comme √ßa...  \n\u003e - Expert : C'est vrai. On peut le simplfiier en ajoutant une abstraction sur le calcul du bonus.  \n\u003e - Novice : Comment peut-on faire √ßa ?  \n\u003e - Expert : C'est simple, avec le refactoring extract method.  \n\nNous sommes assez avanc√©s pour extraire le concept de calcul de bonus. Pour cela, nous allons faire un [[wiki/extract method|extract method]]. Cela consiste √† cr√©er une fonction √† partir d'un bloc de code.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    return score;\n}\n\n+public int calculateFrameBonus(int frameIndex) {\n+   int bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n+   return bonus;\n+}\n```\n\n\u003e - Novice : 70 lignes de moins dans la fonction `score` !  \n\u003e - Expert : Et ce n'est que le d√©but.  \n\u003e - Novice : Je pense qu'on va faire la m√™me chose pour le calcul du score sans le bonus.  \n\u003e - Expert : Bingo, on va encore perdre des lignes, mais que doit-on faire d'abord ?  \n\u003e - Novice : Mettre en √©vidence le concept puis la duplication.  \n\nLe calcul du score (sans le bonus) peut se faire de plusieurs mani√®res diff√©rentes. J'ai choisi l'approche de faire le moins de modification possible dans le code actuel (pour les *strikes* et les *spares*, il aurait √©t√© possible de calculer directement 10).\n\nIci, nous allons calculer la somme d'un lancer dans le cas d'un strike et la somme de deux lancers dans les autres cas.\n\nMettons en √©vidence le concept de score li√© √† la frame : \n\n```diff\n\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n+   int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   frameScore = rolls.get(frameIndex); // roll 1\n+   frameScore += rolls.get(frameIndex + 1); // roll 2\n-   score += rolls.get(frameIndex); // roll 1\n-   score += rolls.get(frameIndex + 1); // roll 2\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 3\n+   frameScore += rolls.get(frameIndex + 1); // roll 4\n-   score += rolls.get(frameIndex); // roll 3\n-   score += rolls.get(frameIndex + 1); // roll 4\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 5\n+   frameScore += rolls.get(frameIndex + 1); // roll 6 (spare)\n-   score += rolls.get(frameIndex); // roll 5\n-   score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 7\n+   frameScore += rolls.get(frameIndex + 1); // roll 8\n-   score += rolls.get(frameIndex); // roll 7\n-   score += rolls.get(frameIndex + 1); // roll 8\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 9\n+   frameScore += rolls.get(frameIndex + 1); // roll 10\n-   score += rolls.get(frameIndex); // roll 9\n-   score += rolls.get(frameIndex + 1); // roll 10\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 11\n+   frameScore += rolls.get(frameIndex + 1); // roll 12\n-   score += rolls.get(frameIndex); // roll 11\n-   score += rolls.get(frameIndex + 1); // roll 12\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 13\n+   frameScore += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   score += rolls.get(frameIndex); // roll 13\n-   score += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+       frameScore = rolls.get(frameIndex); // roll 15 (strike)\n-   score += rolls.get(frameIndex); // roll 15 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   frameScore = rolls.get(frameIndex); // roll 16\n+   frameScore += rolls.get(frameIndex + 1); // roll 17\n-   score += rolls.get(frameIndex); // roll 16\n-   score += rolls.get(frameIndex + 1); // roll 17\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 18 (strike)\n-   score += rolls.get(frameIndex); // roll 18 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    return score;\n}\n```\n\nEnsuite, on met en √©vidence la duplication : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 1\n-   frameScore += rolls.get(frameIndex + 1); // roll 2\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 3\n-   frameScore += rolls.get(frameIndex + 1); // roll 4\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 5\n-   frameScore += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 7\n-   frameScore += rolls.get(frameIndex + 1); // roll 8\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 9\n-   frameScore += rolls.get(frameIndex + 1); // roll 10\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 11\n-   frameScore += rolls.get(frameIndex + 1); // roll 12\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 13\n-   frameScore += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 15 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 18 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n```\n\nPuis on la supprimons avec un [[wiki/extract method |extract method]] : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n+private int calculateFrameScore(int frameIndex) {  \n+    int frameScore;  \n+    if (rolls.get(frameIndex) == 10) {  \n+        frameScore = rolls.get(frameIndex);  \n+    } else {  \n+        frameScore = rolls.get(frameIndex);  \n+        frameScore += rolls.get(frameIndex + 1);  \n+    }  \n+    return frameScore;  \n+}+\n\n```\n\n\u003e - Novice : Il reste encore un concept, l'indice de la prochaine frame. C'est √ßa ?  \n\u003e - Expert : Tout √† fait. Tu commences √† comprendre :)  \n\u003e - Novice : Alors, le concept existe d√©j√†, on va donc mettre en √©vidence la duplication puis la supprimer avec un extract method.  \n\u003e - Expert : Bingo ! \n\nVoil√† la mise en √©vidence : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n\tframeIndex = 0;\n\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 1;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n```\n\nEt la suppression avec un [[wiki/extract method|extract method]] : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n+private int nextFrame(int frameIndex) {\n+    if (rolls.get(frameIndex) == 10) {\n+        frameIndex = frameIndex + 1;\n+    } else {\n+        frameIndex = frameIndex + 2;\n+    }\n+    return frameIndex;\n+}\n```\n\n\u003e - Novice : Et maintenant, la boucle !!!!!  \n\u003e - Expert : Presque, il y a encore une chose qui ne colle pas.  \n\u003e - Novice : ???  \n\u003e - Expert : Tous les blocs de codes sont identiques, sauf pour le frame 1  \n\u003e - Novice : Oui, c'est vrai, on n'a qu'√† faire un cas particulier pour ce bloc.  \n\u003e - Expert : Ou alors, on l'aligne avec les autres   \n\u003e - Novice : ???  \n\u003e - Expert : Tu vas voir  \n\nPour rendre le code identique, on supprime tout simplement l'initialisation de `frameIndex` qui est d√©j√† fait (on aurait pu la supprimer depuis longtemps).\n\nEnsuite, sans cette initialisation, il n'y a pas de calcul de `frameIndex` dans le premier bloc, on d√©place donc le calcul du deuxi√®me bloc pour l'associer au premier bloc. On fait ainsi pour chaque bloc.\n\nEnfin, on se rend compte que le dixi√®me bloc est diff√©rent des autres. On lui ajoute un `nextFrame` et on lance les tests pour voir si cette ligne suppl√©mentaire ne casse rien.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n-   frameIndex = 0;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 2\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 3\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 4\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 5\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 6\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 7\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 8\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 9\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 10\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n    \n    return score;\n}\n```\n\n\u003e - Novice : On peut enfin passer √† la boucle ?  \n\u003e - Expert : Ouiiiii ! Tous nos blocs sont identiques.\n\nNotre code traite 10 frames. On va donc utiliser un compteur qui va jusqu'√† 10 : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n-\t// frame 1    \n+   for (int frame = 0; frame \u003c 10; frame++) {\n        frameScore = calculateFrameScore(frameIndex);\n        bonus = calculateFrameBonus(frameIndex);\n        score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n+   }\n-   // frame 2\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 3\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 4\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 5\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 6\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 7\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 8\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 9\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 10\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n    return score;\n}\n```\n\nLa port√©e de nos variables peut √™tre diminu√©e : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n-   int bonus = 0;\n-   int frameScore = 0;\n\n    // frame 1\n    for (int frame = 0; frame \u003c 10; frame++) {\n+       int frameScore = calculateFrameScore(frameIndex);\n+       int bonus = calculateFrameBonus(frameIndex);\n-       frameScore = calculateFrameScore(frameIndex);\n-       bonus = calculateFrameBonus(frameIndex);\n        score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n    }\n\n    return score;\n}\n```\n\nLes m√©thodes sont aussi parlantes que nos variables, on peut donc les supprimer : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n\n    // frame 1\n    for (int frame = 0; frame \u003c 10; frame++) {\n+       score += calculateFrameScore(frameIndex) + calculateFrameBonus(frameIndex);\n-       int frameScore = calculateFrameScore(frameIndex);\n-       int bonus = calculateFrameBonus(frameIndex);\n-       score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n    }\n\n    return score;\n}\n```\n\nOn peut simplifier la lecture en introduisant les concepts de strike et de spare : \n\n```diff\nprivate int nextFrame(int frameIndex) {\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        frameIndex = frameIndex + 1;\n    } else {\n        frameIndex = frameIndex + 2;\n    }\n    return frameIndex;\n}\n\nprivate int calculateFrameScore(int frameIndex) {\n    int frameScore;\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        frameScore = rolls.get(frameIndex);\n    } else {\n        frameScore = rolls.get(frameIndex);\n        frameScore += rolls.get(frameIndex + 1);\n    }\n    return frameScore;\n}\n\npublic int calculateFrameBonus(int frameIndex) {\n    int bonus = 0;\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        bonus = rolls.get(frameIndex + 1);\n        bonus += rolls.get(frameIndex + 2);\n    } else if (isSpare(frameIndex))\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n        bonus = rolls.get(frameIndex + 2);\n    else\n        bonus = 0;\n    return bonus;\n+}\n\n+private boolean isSpare(int frameIndex) {\n+    return rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10;\n+}\n\n+private boolean isStrike(int frameIndex) {\n+   return rolls.get(frameIndex) == 10;\n+}\n```\n\nEt voil√† ! Nous pourrions encore faire du refactoring, mais ce code fonctionne et je le trouve satisfaisant pour l'exercice.\n\n## La classe Bowling : \n```java\npublic class Bowling {  \n    List\u003cInteger\u003e rolls = new ArrayList\u003c\u003e();  \n  \n    public void roll(int pins) {  \n        rolls.add(pins);  \n    }  \n  \n    public int score() {  \n        int score = 0;  \n        int frameIndex = 0;  \n  \n        // frame 1  \n        for (int frame = 0; frame \u003c 10; frame++) {  \n            score += calculateFrameScore(frameIndex) + calculateFrameBonus(frameIndex);  \n            frameIndex = nextFrame(frameIndex);  \n        }  \n  \n        return score;  \n    }  \n  \n    private int nextFrame(int frameIndex) {  \n        if (isStrike(frameIndex)) {\n            frameIndex = frameIndex + 1;  \n        } else {  \n            frameIndex = frameIndex + 2;  \n        }  \n        return frameIndex;  \n    }  \n  \n    private int calculateFrameScore(int frameIndex) {  \n        int frameScore;  \n        if (isStrike(frameIndex)) {  \n            frameScore = rolls.get(frameIndex);  \n        } else {  \n            frameScore = rolls.get(frameIndex);  \n            frameScore += rolls.get(frameIndex + 1);  \n        }  \n        return frameScore;  \n    }  \n  \n    public int calculateFrameBonus(int frameIndex) {  \n        int bonus = 0;  \n        if (isStrike(frameIndex)) {  \n            bonus = rolls.get(frameIndex + 1);  \n            bonus += rolls.get(frameIndex + 2);  \n        } else if (isSpare(frameIndex))  \n            bonus = rolls.get(frameIndex + 2);  \n        else\n            bonus = 0;  \n        return bonus;  \n    }  \n  \n    private boolean isSpare(int frameIndex) {  \n        return rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10;  \n    }  \n  \n    private boolean isStrike(int frameIndex) {  \n        return rolls.get(frameIndex) == 10;  \n    }  \n}\n```\n\n## Conclusion\nJ'ai forc√© la d√©monstration de la m√©thode en ne faisant qu'un seul test. J'ai mis de c√¥t√© TDD pour me concentrer seulement sur le refactoring.\n\nBien s√ªr, cette m√©thode doit √™tre coupl√©e √† TDD et il faut √©crire les tests au fur et √† mesure. Elle ne fonctionne pas dans tous les cas, mais tricher permet parfois d'aller beaucoup plus vite.\n\nMerci de m'avoir lu jusqu'au bout ![]()","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/etude-du-kata-gilded-rose-golden-master":{"title":"etude du kata gilded rose - golden master","content":"Dans cette √©tude de kata, nous allons √©tudier [[wiki/gilded rose|gilded rose]]. Je vais te montrer comment mettre en place tr√®s rapidement un test de caract√©risation avc un golden master et le r√©soudre encore plus rapidement gr√¢ce √† une astuce de refactoring.\n\n## Le code initial\nVoici le code sur lequel on va travailler : \n\n```java\npackage com.gildedrose;\n\nclass GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            if (!items[i].name.equals(\"Aged Brie\")\n                    \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                if (items[i].quality \u003e 0) {\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].quality = items[i].quality - 1;\n                    }\n                }\n            } else {\n                if (items[i].quality \u003c 50) {\n                    items[i].quality = items[i].quality + 1;\n\n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].sellIn \u003c 11) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn \u003c 6) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                items[i].sellIn = items[i].sellIn - 1;\n            }\n\n            if (items[i].sellIn \u003c 0) {\n                if (!items[i].name.equals(\"Aged Brie\")) {\n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n                } else {\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nCharmant, n'est-ce pas ? On peut trouver le projet complet sur [le github d'Emily Bache](https://github.com/emilybache/GildedRose-Refactoring-Kata).\n\nApr√®s l'avoir r√©cup√©r√©, je t'invite √† l'√©tudier. Il y a la classe `GildedRose` qui contient la m√©thode ci-dessus. Il y a aussi un test unitaire `GildedRoseTest.java` qui ne sert pas √† grand chose, si ce n'est avoir un point de d√©part.\n\nIl y a aussi un fichier `TexttestFixture.java` que j'utilisais pour mes pr√©c√©dents *golden master*.\n\n## Mise en place du golden master\nLe [[wiki/golden master|golden master]] nous permet de mettre en place tr√®s simplement un test qui va nous permettre de refactorer le code tranquillement. Il s'agit tout simplement de stocker dans un fichier la sortie cr√©√©e par une fonctionnalit√© existante et de v√©rifier qu'on g√©n√®re toujours la m√™me sortie.\n\nJe vais recycler le test foo qui est fourni dans le projet pour mettre en place ce *golden master*. Pour √™tre honn√™te, je n'ai pas pris le temps (j'ai oubli√© :p) de renommer le test automatique.\n\nOn cr√©e notre golden master dans une simple cha√Æne de caract√®re et on utilise la librairie [[wiki/ApprovalTests|ApprovalTests]] pour le valider. On en profite pour supprimer le `assertEquals` qui ne servait √† rien : \n\n```diff\n     @Test\n     void foo() {\n+        StringBuilder golden_master = new StringBuilder();\n\n         Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n         GildedRose app = new GildedRose(items);\n         app.updateQuality();\n-        assertEquals(\"fixme\", app.items[0].name);\n+\n+        golden_master.append(items[0].toString() + \"\\n\");\n+\n+        Approvals.verify(golden_master.toString());\n+\n     }\n\n }\n\n```\n\nApr√®s avoir ex√©cut√© ce test, un outil de comparaison s'ouvre (Winmerge dans mon cas) pour indiquer que le golden master g√©n√©r√© ne correspond pas au golden master de r√©f√©rence. C'est normal. Cette r√©f√©rence va √©voluer au fil du temps jusqu'√† ce qu'elle soit suffisante pour nous servir de test de non-regresssion.\n\n### Le code coverage\n\n\u003e Novice : Est-ce que le test est termin√© ?  \n\u003e Expert : Non, le test doit couvrir l'int√©gralit√© de la fonctionnalit√©  \n\u003e Novice : Comment savoir si c'est le cas ?  \n\u003e Expert : On ne peut jamais en √™tre s√ªr, mais il y a un outil qui va nous aider.  \n\u003e Novice : Lequel ?  \n\u003e Expert : Le code coverage !  \n\nLa couverture de code (ou code coverage) nous indique le pourcentage de code ex√©cut√© lors de la derni√®re ex√©cution. Elle nous indique aussi les lignes qui ont (ou n'ont pas) √©t√© ex√©cut√©es.\n\nJe consid√®re le code coverage (ou couverture de code) comme un outil. Je pense que ce n'est pas une m√©trique fiable, mais elle peut nous guider pour la mise en place de nos tests. \n\nActuellement, ma couverture de code est de 42%. Je vais compl√©ter mon test pour essayer de couvrir un peu plus.\n\nPour cela, j'analyse le code qui a √©t√© couvert et celui qui ne l'a pas √©t√©. Ce qui donne √ßa : \n\n```java\npublic void updateQuality() {   \n    for (int i = 0; i \u003c items.length; i++) {  \n        if (!items[i].name.equals(\"Aged Brie\")  \n                \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {  \n            if (items[i].quality \u003e 0) {  \n            \n            // le code ci-dessous n'a pas √©t√© couvert\n                if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {  \n                    items[i].quality = items[i].quality - 1;  \n                }  \n            }\n\t\t...        \n```\n\nJe ne suis pas rentr√© dans la condition √† cause de l'attribut `quality` de mon item. Je constate que c'est un crit√®re que je peux faire √©voluer dans mon test. Je vais m'en servir pour augmenter la couverture de code.\n\nJ'analyse l'utilisation de cet attribut et je constate qu'on l'utilise souvent dans des conditions. Cet attribut semble √™tre born√© par les valeurs `0` et `50`. Je vais manipuler cet attribut comme une entr√©e de ma fonctionnalit√© (j'y ai acc√®s) et le faire varier pour voir ce qu'il se passe. Pour √™tre plus prudent, je vais augmenter les bornes et les passer de `-50` √† `100`.\n\nJe vais √©valuer chacune de ces √©volutions et m√©moriser la sortie dans mon golden master. Ce qui donne le code suivant : \n\n```diff\n    @Test\n    void foo() {\n        StringBuilder golden_master = new StringBuilder();\n\n+       for (int quality = -50; quality \u003c 100; quality++) {\n+           Item[] items = new Item[] { new Item(\"foo\", 0, quality) };\n-           Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n            GildedRose app = new GildedRose(items);            \n            app.updateQuality();\n            golden_master.append(items[0].toString() + \"\\n\");\n+       }\n        Approvals.verify(golden_master.toString()); \n    }\n```\n\nLa couverture de code a augment√© √† 63%\n\nSi l'on √©tudie le code, on constate que l'on bloque sur le nom d'un des items. Nous ne passons pas dans le code de l'item `AgedBrie`.\n\nOn va donc faire la m√™me chose que pr√©c√©demment, nous allons √©tudier le champ des possibles pour l'attribut `name`. On constate que l'on v√©rifie 3 valeurs dans le code : \n- `\"Aged Brie\"`\n- `\"Backstage passes to a TAFKAL80ETC concert\"`\n- `\"Sulfuras, Hand of Ragnaros\"`\n\nEt si l'on ajoute notre premier item `foo` (je sais, on aurait pu utiliser un nom plus orient√© m√©tier), cela nous fait au moins 4 valeurs √† tester : \n\n```diff\n    @Test\n    void foo() {\n        StringBuilder golden_master = new StringBuilder();\n+       String names[] = new String[] { \"Foo\", \"Aged Brie\", \"Sulfuras, Hand of Ragnaros\", \"Backstage passes to a TAFKAL80ETC concert\" };\n\n+       for (String name: names) {\n            for (int quality = -50; quality \u003c 100; quality++) {\n+               Item[] items = new Item[] { new Item(name, 0, quality) };\n-               Item[] items = new Item[] { new Item(\"foo\", 0, quality) };\n                GildedRose app = new GildedRose(items);\n                app.updateQuality();\n                golden_master.append(items[0].toString() + \"\\n\");\n            }\n+       }\n        Approvals.verify(golden_master.toString());\n    }\n```\n\n\u003e Novice : Et voil√†, notre code coverage est pass√© √† 100% ! Place au refactoring !  \n\u003e Expert : Oula, il y a encore des points √† v√©rifier.  \n\u003e Novice : ???  \n\u003e Expert : Oui, un code coverage de 100% ne nous garantit pas que l'on passe partout.  \n\u003e Novice : ???   \n\nEffectivement, le code coverage est pass√© √† 100 %. Mais cela ne veut pas dire que notre test est termin√©. Nous allons devoir utiliser l'exp√©rience et l'intuition pour v√©rifier cela.\n\nLorsqu'on analyse le code, on constate qu'il y a un attribut `sellIn` qui est utilis√© lui aussi dans des conditions. Si l'on v√©rifie, on constate que l'utilisation de cet attribut est born√©e entre 0 et 11. Nous allons donc partir sur des valeurs entre -20 et 20.\n\nCe qui donne √ßa :\n\n```diff\n    @Test\n    void foo() {\n        StringBuilder golden_master = new StringBuilder();\n        String names[] = new String[] { \"Foo\", \"Aged Brie\", \"Sulfuras, Hand of Ragnaros\", \"Backstage passes to a TAFKAL80ETC concert\" };\n\n        for (String name: names) {\n+           for (int sellIn = -20; sellIn \u003c 20; sellIn++) {\n                for (int quality = -50; quality \u003c 100; quality++) {\n+                   Item[] items = new Item[] { new Item(name, sellIn, quality) };\n-                   Item[] items = new Item[] { new Item(name, 0, quality) };\n                    GildedRose app = new GildedRose(items);\n                    app.updateQuality();\n                    golden_master.append(items[0].toString() + \"\\n\");\n                }\n+           }\n        }\n        Approvals.verify(golden_master.toString());\n    }\n```\n\nEt voil√†, avec ce test, notre code est bien couvert. Nous allons pouvoir commencer le refactoring.\n\nJe te propose de lire cela dans la seconde partie.\n\nMerci d'avoir pris le temps de me lire.","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/etude-du-kata-gilded-rose-switch":{"title":"etude du kata gilded rose - switch","content":"Parfois, il suffit d'une simple astuce pour faire en quelques minutes un travail qui peut prendre plusieurs heures. C'est pourquoi il est primordial de s'exercer en permanence pour d√©couvrir ses astuces et pouvoir les r√©utiliser le moment opportun.\n\nIci, nous allons rusher le kata [[wiki/gilded rose|gilded rose]]. La technique que je vais utiliser est tr√®s int√©ressante, mais fait perdre tout son int√©r√™t √† ce kata. Je t'invite donc √† ex√©cuter ce kata de deux mani√®res, avec celle que tu vas d√©couvrir ici et la mani√®re plus traditionnelle.\n\nCette √©tude est la suite de l'article [[blog/etude du kata gilded rose - golden master|etude du kata gilded rose - golden master]]. Si tu ne l'as pas d√©j√† lu, je te recommande de commencer par l√†. En effet, il faut pouvoir lancer des tests automatiques pour commencer le refactoring.\n\n## tl;dr\nLe `switch` et le code coverage permette de faire ce kata en un temps record. Le switch permet de dupliquer le code pour chaque item en fonction de son nom puis le code coverage permet de supprimer le code que l'on n'utilise pas en fonction de l'item.\n\n## Le code initial \n\nVoici le code initial du [[wiki/gilded rose|gilded rose]] que l'on doit retravailler :\n\n```java\npackage com.gildedrose;  \n  \nclass GildedRose {  \n    Item[] items;  \n  \n    public GildedRose(Item[] items) {  \n        this.items = items;  \n    }  \n  \n    public void updateQuality() {  \n        for (int i = 0; i \u003c items.length; i++) {  \n            if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {  \n                if (items[i].quality \u003e 0) {  \n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {  \n                        items[i].quality = items[i].quality - 1;  \n                    }  \n                }  \n            } else {  \n                if (items[i].quality \u003c 50) {  \n                    items[i].quality = items[i].quality + 1;  \n  \n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {  \n                        if (items[i].sellIn \u003c 11) {  \n                            if (items[i].quality \u003c 50) {  \n                                items[i].quality = items[i].quality + 1;  \n                            }  \n                        }  \n  \n                        if (items[i].sellIn \u003c 6) {  \n                            if (items[i].quality \u003c 50) {  \n                                items[i].quality = items[i].quality + 1;  \n                            }  \n                        }  \n                    }  \n                }  \n            }  \n  \n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {  \n                items[i].sellIn = items[i].sellIn - 1;  \n            }  \n  \n            if (items[i].sellIn \u003c 0) {  \n                if (!items[i].name.equals(\"Aged Brie\")) {  \n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {  \n                        if (items[i].quality \u003e 0) {  \n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {  \n                                items[i].quality = items[i].quality - 1;  \n                            }  \n                        }  \n                    } else {  \n                        items[i].quality = items[i].quality - items[i].quality;  \n                    }  \n                } else {  \n                    if (items[i].quality \u003c 50) {  \n                        items[i].quality = items[i].quality + 1;  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}\n```\n\n## Rushons le kata\nLa technique que je vais employer fonctionne pour une bonne raison. Il n'y a pas d'effet de bord dans le code actuel, si ce n'est modifier les attributs `quality` ou `sellIn`. \n\n\u003e - Novice : Je ne vois pas comment tu vas faire pour nettoyer ce code en quelques minutes  \n\u003e - Expert : Pour cela, on va utiliser un mot cl√© du langage. Il n'existe pas dans tous les langages, mais il est facile √† remplacer si besoin  \n\u003e - Novice : Et c'est quoi ce mot cl√© ???  \n\u003e - Expert : Le switch, et s'il n'existe pas, plusieurs if imbriqu√©  \n\u003e - Novice : ???\n\u003e - Expert : Tu vas voir !\n\nOui, nous allons utiliser un `switch`  pour r√©gler ce kata. Cela est possible parce qu'il y a un √©l√©ment qui intervient √©norm√©ment dans les r√®gles m√©tiers du gilded rose, mais qui ne change jamais pour un item donn√©. C'est l'attribut `name`.\n\nVoyons la mise en place du switch : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n+           switch (items[i].name) {\n+               default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        } else {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n+                   }\n            }\n        }\n    }\n```\n\n### case \"Aged Brie\"\n\nPuis nous dupliquons le code de cette mani√®re.\n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n+               case \"Aged Brie\":\n+                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                       if (items[i].quality \u003e 0) {\n+                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                               items[i].quality = items[i].quality - 1;\n+                           }\n+                       }\n+                   } else {\n+                       if (items[i].quality \u003c 50) {\n+                           items[i].quality = items[i].quality + 1;\n+\n+                           if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                               if (items[i].sellIn \u003c 11) {\n+                                   if (items[i].quality \u003c 50) {\n+                                       items[i].quality = items[i].quality + 1;\n+                                   }\n+                               }\n+\n+                               if (items[i].sellIn \u003c 6) {\n+                                   if (items[i].quality \u003c 50) {\n+                                       items[i].quality = items[i].quality + 1;\n+                                   }\n+                               }\n+                           }\n+                       }\n+                   }\n+\n+                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                       items[i].sellIn = items[i].sellIn - 1;\n+                   }\n+\n+                   if (items[i].sellIn \u003c 0) {\n+                       if (!items[i].name.equals(\"Aged Brie\")) {\n+                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                               if (items[i].quality \u003e 0) {\n+                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                                       items[i].quality = items[i].quality - 1;\n+                                   }\n+                               }\n+                           } else {\n+                               items[i].quality = items[i].quality - items[i].quality;\n+                           }\n+                       } else {\n+                           if (items[i].quality \u003c 50) {\n+                               items[i].quality = items[i].quality + 1;\n+                           }\n+                       }\n+                   }\n+\n+                   break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        } else {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\n\u003e - Novice : Bravo ! Tu as deux fois plus de code maintenant. Que comptes-tu faire ?  \n\u003e - Expert : Je vais tout simplement reex√©cuter mon test avec le code coverage  \n\u003e - Novice : Le code coverage ?  \n\u003e - Expert : Mais oui, souviens-toi, on en a parl√© dans la partie pr√©c√©dente  \n\u003e - Novice : Et qu'est-ce que √ßa va faire ?  \n\u003e - Expert : De la magie !  \n\nJ'ai oubli√© de le pr√©ciser, nous allons utiliser le code coverage pour r√©aliser ce kata. Gr√¢ce √† cela, plus besoin de r√©fl√©chir, c'est le test qui le fait pour nous.\n\nDonc, nous lan√ßons le test avec le code coverage et nous constatons que certaines lignes ne sont pas ex√©cut√©es dans le premier cas, comme dans le cas par d√©faut. Nous les supprimons. Dans le diff suivant, toutes les lignes supprim√©es correspondent aux lignes qui n'ont pas √©t√© ex√©cut√©es :\n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                       if (items[i].quality \u003e 0) {\n-                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                               items[i].quality = items[i].quality - 1;\n-                           }\n-                       }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                               if (items[i].sellIn \u003c 11) {\n-                                   if (items[i].quality \u003c 50) {\n-                                       items[i].quality = items[i].quality + 1;\n-                                   }\n-                               }\n-\n-                               if (items[i].sellIn \u003c 6) {\n-                                   if (items[i].quality \u003c 50) {\n-                                       items[i].quality = items[i].quality + 1;\n-                                   }\n-                               }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n-                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                               if (items[i].quality \u003e 0) {\n-                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                                       items[i].quality = items[i].quality - 1;\n-                                   }\n-                               }\n-                           } else {\n-                               items[i].quality = items[i].quality - items[i].quality;\n-                           }\n                        } else {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n\n                    break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        } else {\n-                           if (items[i].quality \u003c 50) {\n-                               items[i].quality = items[i].quality + 1;\n-                           }\n                        }\n                    }\n            }\n        }\n    }\n```\n\nSuite √† cela, nous nous retrouvons avec des blocs `if / else` vides. Si malgr√© le test, nous ne rentrons jamais dans un bloc `if` ou dans un bloc `else`, cela signifie que la condition est respectivement soit toujours fause, soit toujours vrai. Nous pouvons donc supprimer le bloc correspondant. C'est simple parce que c'est le bloc vide qu'il faut supprimer.\n\nPetit exemple avec le premier bloc : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n-                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                   } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                           }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                        } else {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n\n                    break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        } else {\n                        }\n                    }\n            }\n        }\n    }\n```\n\nJe vais un peu plus vite en supprimant tous les blocs vides : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n-\n-                       if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                       }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n-                       if (!items[i].name.equals(\"Aged Brie\")) {\n-                       } else {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n-                   }\n\n                    break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n-                       } else {\n                        }\n                    }\n            }\n        }\n    }\n```\n\nEnfin, il nous reste un bloc dans lequel on v√©rifie si l'attribut `name` est diff√©rent de `\"Sulfuras, Hand of Ragnaros\"`. Nous sommes s√ªrs de travailler avec un `\"Aged Brie\"`. La condition est toujours vrai dans ce bloc `case`, nous pouvons donc la supprimer (mais on garde le code √† l'int√©rieur) : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n-                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n-                   }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\n### case \"Backstage passes to a TAFKAL80ETC concert\"\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n+\n+               case \"Backstage passes to a TAFKAL80ETC concert\":\n+                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                       if (items[i].quality \u003e 0) {\n+                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                               items[i].quality = items[i].quality - 1;\n+                           }\n+                       }\n+                   } else {\n+                       if (items[i].quality \u003c 50) {\n+                           items[i].quality = items[i].quality + 1;\n+\n+                           if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                               if (items[i].sellIn \u003c 11) {\n+                                   if (items[i].quality \u003c 50) {\n+                                       items[i].quality = items[i].quality + 1;\n+                                   }\n+                               }\n+\n+                               if (items[i].sellIn \u003c 6) {\n+                                   if (items[i].quality \u003c 50) {\n+                                       items[i].quality = items[i].quality + 1;\n+                                   }\n+                               }\n+                           }\n+                       }\n+                   }\n+\n+                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                       items[i].sellIn = items[i].sellIn - 1;\n+                   }\n+\n+                   if (items[i].sellIn \u003c 0) {\n+                       if (!items[i].name.equals(\"Aged Brie\")) {\n+                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                               if (items[i].quality \u003e 0) {\n+                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                                       items[i].quality = items[i].quality - 1;\n+                                   }\n+                               }\n+                           } else {\n+                               items[i].quality = items[i].quality - items[i].quality;\n+                           }\n+                       }\n+                   }\n+\n+                   break;\n+\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n                            if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\nPuis nous relan√ßons les tests avec le code coverage, nous supprimons le code mort, nous supprimons les blocs de code `if / else` qui sont forc√©ment faux (ou vrai).\n\nCe qui donne : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n\n                case \"Backstage passes to a TAFKAL80ETC concert\":\n-                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                       if (items[i].quality \u003e 0) {\n-                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                               items[i].quality = items[i].quality - 1;\n-                           }\n-                       }\n-                   } else {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n\n-                           if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].sellIn \u003c 11) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n\n                                if (items[i].sellIn \u003c 6) {\n                                    if (items[i].quality \u003c 50) {\n                                        items[i].quality = items[i].quality + 1;\n                                    }\n                                }\n                            }\n-                       }\n-                   }\n\n-                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n-                   }\n\n                    if (items[i].sellIn \u003c 0) {\n-                       if (!items[i].name.equals(\"Aged Brie\")) {\n-                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                               if (items[i].quality \u003e 0) {\n-                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                                       items[i].quality = items[i].quality - 1;\n-                                   }\n-                               }\n-                           } else {\n                                items[i].quality = items[i].quality - items[i].quality;\n                            }\n-                       }\n-                   }\n\n                    break;\n\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n-                   } else {\n-                       if (items[i].quality \u003c 50) {\n-                           items[i].quality = items[i].quality + 1;\n-\n-                           if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                               if (items[i].sellIn \u003c 11) {\n-                                   if (items[i].quality \u003c 50) {\n-                                       items[i].quality = items[i].quality + 1;\n-                                   }\n-                               }\n-\n-                               if (items[i].sellIn \u003c 6) {\n-                                   if (items[i].quality \u003c 50) {\n-                                       items[i].quality = items[i].quality + 1;\n-                                   }\n-                               }\n-                           }\n-                       }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n-                           } else {\n-                               items[i].quality = items[i].quality - items[i].quality;\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\n### case \"Sulfuras, Hand of Ragnaros\"\n\nNous faisons la m√™me chose pour l'item `Sulfuras, Hand of Ragnaros\"` .\n\nDuplication dans un nouveau case : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n\n                case \"Backstage passes to a TAFKAL80ETC concert\":\n\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n\n\n                        if (items[i].sellIn \u003c 11) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn \u003c 6) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n\n                    break;\n+               case \"Sulfuras, Hand of Ragnaros\":\n+                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                       if (items[i].quality \u003e 0) {\n+                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                               items[i].quality = items[i].quality - 1;\n+                           }\n+                       }\n+                   }\n\n+                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                       items[i].sellIn = items[i].sellIn - 1;\n+                   }\n+\n+                   if (items[i].sellIn \u003c 0) {\n+                       if (!items[i].name.equals(\"Aged Brie\")) {\n+                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n+                               if (items[i].quality \u003e 0) {\n+                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n+                                       items[i].quality = items[i].quality - 1;\n+                                   }\n+                               }\n+                           }\n+                       }\n+                   }\n+\n+                   break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\nPuis nous supprimons le code inutile : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n\n                case \"Backstage passes to a TAFKAL80ETC concert\":\n\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n\n\n                        if (items[i].sellIn \u003c 11) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn \u003c 6) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n\n                    break;\n                case \"Sulfuras, Hand of Ragnaros\":\n-                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                       if (items[i].quality \u003e 0) {\n-                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                               items[i].quality = items[i].quality - 1;\n-                           }\n-                       }\n-                   }\n-\n-                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                       items[i].sellIn = items[i].sellIn - 1;\n-                   }\n-\n-                   if (items[i].sellIn \u003c 0) {\n-                       if (!items[i].name.equals(\"Aged Brie\")) {\n-                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n-                               if (items[i].quality \u003e 0) {\n-                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n-                                       items[i].quality = items[i].quality - 1;\n-                                   }\n-                               }\n-                           }\n-                       }\n-                   }\n\n                    break;\n                default:\n                    if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    }\n\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n                    }\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (!items[i].name.equals(\"Aged Brie\")) {\n                            if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n                                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    }\n```\n\n\u003e - Novice : Il n'y a plus de code  \n\u003e - Expert : Effectivement, si on lit le cahier des charges, cet item ne doit jamais changer. Il n'a donc pas de r√®gle m√©tier\n\n### default case : \nNous allons maintenant traiter le cas par d√©faut.\n\nNous avons g√©r√© tous les √©l√©ments ayant un nom sp√©cifique dans le switch. Nous n'avons plus que des √©l√©ments pour lequel le nom n'a plus d'importance m√©tier. Nous allons donc supprimer toutes les conditions faisant r√©f√©rence au nom, tout en conservant le code des blocs `if` forc√©ment ex√©cut√©s : \n\n```diff\npublic void updateQuality() {\n        for (int i = 0; i \u003c items.length; i++) {\n            switch (items[i].name) {\n                case \"Aged Brie\":\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        if (items[i].quality \u003c 50) {\n                            items[i].quality = items[i].quality + 1;\n                        }\n                    }\n\n                    break;\n\n                case \"Backstage passes to a TAFKAL80ETC concert\":\n\n                    if (items[i].quality \u003c 50) {\n                        items[i].quality = items[i].quality + 1;\n\n\n                        if (items[i].sellIn \u003c 11) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn \u003c 6) {\n                            if (items[i].quality \u003c 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n\n                    items[i].sellIn = items[i].sellIn - 1;\n\n                    if (items[i].sellIn \u003c 0) {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n\n                    break;\n                case \"Sulfuras, Hand of Ragnaros\":\n\n                    break;\n                default:\n-                   if (!items[i].name.equals(\"Aged Brie\") \u0026\u0026 !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality \u003e 0) {\n-                           if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n-                       }\n-                   }\n\n-                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].sellIn = items[i].sellIn - 1;\n-                   }\n\n                    if (items[i].sellIn \u003c 0) {\n-                       if (!items[i].name.equals(\"Aged Brie\")) {\n-                           if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                                if (items[i].quality \u003e 0) {\n-                                   if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                        items[i].quality = items[i].quality - 1;\n-                                   }\n-                               }\n-                           }\n                        }\n                    }\n            }\n        }\n    }\n```\n\n## Conclusion\nVoici le code final de la m√©thode `updateQuality` apr√®s ce refactoring : \n\n```java\npublic void updateQuality() {  \n    for (int i = 0; i \u003c items.length; i++) {  \n        switch (items[i].name) {  \n            case \"Aged Brie\":  \n                if (items[i].quality \u003c 50) {  \n                    items[i].quality = items[i].quality + 1;  \n                }  \n  \n                items[i].sellIn = items[i].sellIn - 1;  \n  \n                if (items[i].sellIn \u003c 0) {  \n                    if (items[i].quality \u003c 50) {  \n                        items[i].quality = items[i].quality + 1;  \n                    }  \n                }  \n  \n                break;  \n  \n            case \"Backstage passes to a TAFKAL80ETC concert\":  \n  \n                if (items[i].quality \u003c 50) {  \n                    items[i].quality = items[i].quality + 1;  \n  \n  \n                    if (items[i].sellIn \u003c 11) {  \n                        if (items[i].quality \u003c 50) {  \n                            items[i].quality = items[i].quality + 1;  \n                        }  \n                    }  \n  \n                    if (items[i].sellIn \u003c 6) {  \n                        if (items[i].quality \u003c 50) {  \n                            items[i].quality = items[i].quality + 1;  \n                        }  \n                    }  \n                }  \n  \n                items[i].sellIn = items[i].sellIn - 1;  \n  \n                if (items[i].sellIn \u003c 0) {  \n                    items[i].quality = items[i].quality - items[i].quality;  \n                }  \n  \n                break;  \n            case \"Sulfuras, Hand of Ragnaros\":  \n  \n                break;  \n            default:  \n                if (items[i].quality \u003e 0) {  \n                    items[i].quality = items[i].quality - 1;  \n                }  \n  \n                items[i].sellIn = items[i].sellIn - 1;  \n  \n                if (items[i].sellIn \u003c 0) {  \n                    if (items[i].quality \u003e 0) {  \n                        items[i].quality = items[i].quality - 1;  \n                    }  \n                }  \n        }  \n    }  \n}\n```\n\nBien qu'il y ait encore du refactoring √† faire, on peut commencer √† comparer les r√®gles m√©tiers avec le cahier des charges qui est fourni avec le projet. \n\nIl ne faut jamais h√©siter √† dupliquer le code pour pouvoir le r√©organiser.\n\nEt en utilisant astucieusement le code coverage, nous pouvons gagner beaucoup de temps lors du refactoring et nettoyage de code. Pour moi, c'est la principale utilit√© de cet outil.\n\nNous verrons dans une troisi√®me (et derni√®re j'esp√®re) partie la suite de ce refactoring.\n\n## Reference\nJ'ai retrouv√© d'autres utilisateurs de cette technique dans cet article : http://www.arolla.fr/blog/2019/11/man-vs-legacy-gilded-rose-2/","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/installer-approvaltests-avec-intellij":{"title":"Installer approvaltests avec intellij","content":"[[wiki/ApprovalTests|ApprovalTests]] est une librairie qui permet de simplifier la cr√©ation de [[wiki/golden master|golden master]]. On s'en sert pour mettre en place des tests de caract√©risation.\n\nJ'ai plusieurs fois gal√©r√© pour ajouter cette librairie dans intellij. Je pense que cela fait partie de l'utilisation standard, mais il est probable que d'autres personnes perdent du temps √† trouver la r√©ponse.\n\nDans un environnement **maven**, il faut proc√©der comme cela : \n\n1. Editer le fichier `pomxml` et ajouter \n\n```xml\n\u003cdependency\u003e  \n    \u003cgroupId\u003ecom.approvaltests\u003c/groupId\u003e  \n    \u003cartifactId\u003eapprovaltests\u003c/artifactId\u003e  \n    \u003cversion\u003e15.3.0\u003c/version\u003e  \n\u003c/dependency\u003e\n```\n\n2. Dans intellij, recharger le projet (clic droit sur le fichier `pom.xml` puis menu `maven/reload project`).\n\n3. Installer un outil de comparaison. Sous Windows, j'utilise [Winmerge](https://winmerge.org/?lang=fr)\n\n4. Importer la classe `Approvals`  et utiliser sa m√©thode `verify`:\n\n```java\nimport org.approvaltests.Approvals;\n\n...\n\nApprovals.verify(\"...\");\n```\n\n\n\n## Reference\n* https://github.com/approvals/ApprovalTests.Java","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/rust-je-narrive-pas-%C3%A0-acc%C3%A9der-%C3%A0-mon-crate-dans-mes-tests":{"title":"Rust - je n'arrive pas √† acc√©der √† mon crate dans mes tests","content":"## Le probl√®me\n\nJ'ai l'habitude d'√©crire mon code de production dans les fichiers de tests au d√©part. Mais lorsque j'ai voulu d√©placer ce code dans le r√©pertoire `src`, les diff√©rents modules n'√©taient plus accessible dans les fichiers de test.\n\n## Que s'est-il pass√© ?\n\nTout simplement, j'ai cr√©√© mon projet pour que ce soit un binaire, et j'ai cr√©√© le fichier `lib.rs` un peu plus tard pour y mettre mon code.\n\nLes derniers projets sur lesquels j'ai travaill√© ne contenaient pas de fichier `main.rs` et tout fonctionnait. Mais lorsque les deux fichiers sont pr√©sents, rust ne sait pas ce qu'il faut faire.\n\n## La solution\nJ'ai modifi√© le fichier `cargo.toml` pour y ajouter ce bout de code (sachant que je souhaite que mon binaire et mon crate s'appelle todolist) : \n\n```toml\n[bin]  \nname = \"todolist\"  \npath = \"src/main.rs\"  \n  \n[lib]  \nname = \"todolist\"  \npath = \"src/lib.rs\"\n```\n\nSi jamais le module lib est un r√©pertoire, on peut indiquer `src/lib/mod.rs` dans le `path`.\n\nGr√¢ce √† cela, j'ai pu de nouveau ex√©cuter mes tests.\n\n## Reference\nhttps://stackoverflow.com/questions/57756927/rust-modules-confusion-when-there-is-main-rs-and-lib-rs","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/blog/utiliser-les-katas-pour-se-perfectionner":{"title":"Utiliser les katas pour se perfectionner","content":"Effectuer un kata, c'est bien, mais √ßa n'apporte pas grand chose. Cela sert √† montrer que l'on sait r√©soudre un probl√®me, d'ordre algorithmique la plupart du temps. Mais lorsqu'on est d√©veloppeur, c'est notre m√©tier de r√©soudre des probl√®mes tous les jours.\n\nJe pense que c'est pour cela que beaucoup de monde estime que les katas sont inutiles. On r√©soud des probl√®mes qui n'ont rien √† voir avec le m√©tier habituel, alors qu'on pourrait r√©soudre alloer piocher des probl√®mes dans notre liste de t√¢ches.\n\nPour moi, on ne pratique pas le kata de cette mani√®re. Mais voyons d√©j√† ce qu'est un kata. Je me base sur [l'article de wikipedia](https://fr.wikipedia.org/wiki/Kata) : \n\n\u003e _**Kata**_ est un terme japonais d√©signant une [forme](https://fr.wikipedia.org/wiki/Forme_(art_martial) \"Forme (art martial)\") dans les [arts martiaux japonais](https://fr.wikipedia.org/wiki/Arts_martiaux_japonais \"Arts martiaux japonais\").  \n\u003e Il s'agit de mouvements codifi√©s √† partir de l'exp√©rience de combattants dont les noms ont √©t√© perdus. Les katas sont par la suite devenus des outils de transmission de techniques, mais aussi de principes, de combat.  \n\u003e [...]   \n\u003e le mot _kata_ √©voque donc √† la fois l‚Äôimage d‚Äôune forme id√©ale √† reproduire ainsi que la fixation et la transmission de connaissances ayant pour base une gestuelle codifi√©e.\n\n## Ma d√©finition\n\nDe ce que j'en comprend, le kata sert √† transmettre des connaissances et permettre √† celui qui le pratique de reproduire une forme id√©ale.\n\nL'id√©e de *reproduction* induit que l'on a √©tudi√© la m√©thode d'autres personnes et la forme id√©ale implique la r√©p√©tition. En effet, quoique l'on fasse, il est peu probable de r√©ussir quelque chose parfaitement d√®s le premier essai.\n\nPour moi, pratiquer un kata se passe ainsi : \n- D√©couvrir et comprendre le kata, au moyen de sa description\n- Valider avec un tiers que l'on a bien compris l'exercice √† effectuer\n- R√©aliser une premi√®re fois, seul, √† deux ou en groupe le kata\n- Etudier ensuite la mani√®re de faire des autres pratiquants, novices et initi√©s\n- R√©p√©ter le kata de mani√®re r√©guli√®re. Intens√©ment au d√©but de l'apprentissage puis avec des r√©p√©titions de plus en plus espac√©es avec le temps.\n- Lors des r√©p√©titions, essayer de trouver d'autres mouvements pour effectuer le kata :\n\t- En changeant l'ordre des tests\n\t- En n'utilisant pas de type primitif\n\t- En faisant du TDD\n\t- En travaillant avec des √©quipiers diff√©rents\n- Enfin, lorsque le kata est ma√Ætris√©, il faut le transmettre √† son tour :\n\t- pour avoir l'avis de ses pairs\n\t- pour assurer la transmission de l'h√©ritage\n\n## Quels katas pratiquer ?\nJ'ai commenc√© √† mettre en place une liste des katas que tu peux travailler. Je te propose une description d√©taill√©e et retravaill√©e des katas existants. Je te mets aussi √† disposition une √©tude d√©taill√©e (si elle a √©t√© effectu√©e) du kata.\n\nPour le moment, je te propose d'effectuer les katas dans cet ordre : \n\n- [[kata/fizzbuzz|FizzBuzz]]\n- [[kata/minesweeper|Minesweeper]]\n- [[kata/bowling|Bowling]]\n\nTu trouveras dans la description l'organisation de l'entra√Ænement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Reference","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo-session":{"title":"Untitled Page","content":"","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo-session/dojo-2022-06-27":{"title":"Dojo du 27/06/2022","content":"## Onboarding\n### Outils\n* rustdesk : https://rustdesk.com/\n* mobtime : [http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev](http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev)\n* framapad : https://hebdo.framapad.org/p/dojo-ytreza-dev-9v07?lang=fr\n\n### Katas\n* Bowling : [https://www.ytreza.dev/kata/bowling/](https://www.ytreza.dev/kata/bowling/)\n\n## Durant le d√©roulement\n### Concepts abord√©s\n* Notion de todo list (liste des tests √† faire ainsi que les refactorings)\n\n### Questions √† √©tudier\n* Comment mettre en place un watcher sous python ?\n\n\n## Fin\nIl y a eu 5 participants\n\nLe prochain dojo aura lieu Mardi 28 √† 9h (9h15 le temps que tout le monde arrive)","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo-session/dojo-2022-06-27-12-00":{"title":"Dojo du 27/06/2022 (12:00)","content":"Travail sur fizzbuzz :\n\n- niveau 2 : mettre en place la construction du mot\n- niveau 3 : mettre en place la boucle avec tableau associatif\n- niveau 4 : extraire le tableau associatif (repository) de la fonction\n\nrepository : collection abstraite que l'on peut extraire sous forme de port / adapter\n  \n\u003e make the change easy then make the easy change\n\n\nCr√©er une hashmap en javascript :¬†\n\n¬†¬†¬† var arr = { \"one\": 1, \"two\": 2, \"three\": 3 };","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo-session/dojo-2022-06-28-09-11":{"title":"Dojo du 28/06/2022 (09:11)","content":"## Onboarding\n### Outils\n* rustdesk : [https://rustdesk.com/](https://rustdesk.com/)\n* mobtime : ([http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev](http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev))\n* framapad : [https://mensuel.framapad.org/p/ytreza-dojo-9v0v?lang=frr](https://mensuel.framapad.org/p/ytreza-dojo-9v0v?lang=frr)\n### Katas\n- Kata bugs-zero :¬† [https://kata-log.rocks/bugs-zero-kata](https://kata-log.rocks/bugs-zero-kata)\n- Lien vers Trivia : [https://github.com/caradojo/trivia](https://github.com/caradojo/trivia)\n\n### R√©f√©rences\n- approval testing (js) : [https://github.com/approvals/Approvals.NodeJS](https://github.com/approvals/Approvals.NodeJS)\n- [https://jestjs.io/fr/docs/snapshot-testing](https://jestjs.io/fr/docs/snapshot-testing)\n- code coverage\n\n## Durant le d√©roulement\n### Snapshot en jest :¬†\n\n```javascript\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('rend correctement', () =\u003e {\n  const tree = renderer\n    .create(\u003cLink page=\"http://www.facebook.com\"\u003eFacebook\u003c/Link\u003e)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n## Fin\nNous √©tions 5.\nProchaine session Jeudi 30 √† 9h","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo-session/dojo-2022-06-30-09-26":{"title":"Dojo du 30/06/2022 (09:26)","content":"## Onboarding\n\n\n\n\n\n### Outils\n* rustdesk : https://rustdesk.com/\n* mobtime : [http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev](http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev)\n* framapad : https://hebdo.framapad.org/p/dojo-ytreza-dev-9v07?lang=fr\n\n### Katas\n* [Diamond](https://codingdojo.org/kata/Diamond/) : \n* \n## Durant le d√©roulement\n### Concepts abord√©s\nTCR\n\n### Questions √† √©tudier\n\n## Fin","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo/onboarding":{"title":"Onboarding du dojo ytreza.dev","content":"Bienvenue au dojo ytreza.dev. Si tu trouves sur cette page, c'est que tu souhaites en savoir plus sur le fonctionnement du dojo. En effet, il y a des r√®gles √† conna√Ætre et nous utilisons des outils afin de pouvoir travailler ensemble tout en √©tant √† distance.\n\nJe t'encourage √† revenir r√©guli√®rement sur cette page car le dojo √©volue en m√™me temps que ses membres. De nouveaux outils et de nouveaux concepts peuvent appara√Ætre tandis que des mani√®res de faire peuvent dispara√Ætre si nous constatons qu'elles ne respectent pas la philosophie du dojo.\n\n### Les r√®gles du dojo\n### Les contraintes d'exercice\n### Les katas\n\n\n### Liste des outils\n- [[dojo/onboarding/workadventure|workadventu.re]] nous permet de nous retrouver dans un espace gamifi√© afin de pouvoir travailler sur diff√©rents sujets.\n- https://workadventu.re/\n- http://mobtimer.zoeetrope.com/\n- https://cyber-dojo.org/\n- Slack\n- Mobilizon\n- Framapad\n\n\n### Outils\n* rustdesk : https://rustdesk.com/\n* mobtime : [http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev](http://mobtime.hadrienmp.fr/mob/dojo-ytreza-dev)\n* framapad : https://hebdo.framapad.org/p/dojo-ytreza-dev-9v07?lang=fr\n\n### Katas\n* Bowling : [https://www.ytreza.dev/kata/bowling/](https://www.ytreza.dev/kata/bowling/)","lastmodified":"2022-08-15T06:52:53.125058788Z","tags":null},"/dojo/onboarding/workadventure":{"title":"WorkAdventu.re","content":"Workadventu.re est l'interface principale du dojo ytreza.dev. Discuter entre nous est primordial pour le partage de connaissance. \n\n[Clique ici pour entrer et d√©couvrir l'interface du dojo.](https://play.workadventu.re/@/ytreza.dev/ytreza.dev/dojo-ytreza.dev)\n\n## Pr√©sentation du dojo\n\n![[ressources/Pasted image 20220811075728.png]]\n\nIl y a plusieurs zones qui permettent de rejoindre un salon de communication.\n- Zone 1 : C'est la zone de conf√©rence. Elle est r√©serv√©e pour les pr√©sentations qui peuvent accueillir plusieurs personnes. Elle est aussi utilis√©e lorsqu'il n'y a qu'un seul groupe durant la session d'entra√Ænement.\n- Zone 2 et 3 : Ce sont les zones d'ensemble programming. Elles sont d√©di√©es √† des groupes de travail de 5 personnes environ.\n- Zone 4, 5, 6, 7, etc... : Ce sont les zones de pair programming. Elles sont utilis√©es lorsqu'il y a plusieurs groupes. Tu peux utiliser ces zones lorsque tu es seul.e ou que tu participes √† un petit groupe de travail. L'id√©al √©tant de ne pas d√©passer plus de 3 personnes.\n- Zone 8 : C'est la zone de silence. Ici, personne ne peut te contacter.\n\n## Utilisation de workadventu.re\nPour **se d√©placer** dans ce monde virtuel, tu peut utiliser les **fl√®ches du clavier** ou les touches **z, q, s, d**. Il suffit de te placer sur une zone et **d'appuyer sur la barre espace** pour la joindre.\n\n\n## Interaction entre personne\nTODO\n\n## R√©f√©rences\nhttps://workadventu.re/","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/dojo/pr%C3%A9sentation":{"title":"Dojo ytreza.dev","content":"* [[dojo/onboarding|Onboarding]]\n\n## Session pass√©es\n* [[dojo-session/|Liste des sessions pass√©es]]\n- [[dojo-session/dojo-2022-06-27-12-00|Dojo du 27/06/2022 (12:00) ]]\n- [[dojo-session/dojo-2022-06-28-09-11|Dojo du 28/06/2022 (09:11) ]]\n- [[dojo-session/dojo-2022-06-30-09-26|Dojo du 30/06/2022 (09:26) ]]\n\n\n\n\n\n\n\n\nAcc√©der au groupe : \n- https://mobilizon.fr/@dojo_ytrezadev","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/formations/Pr%C3%A9sentation-TDD":{"title":"Pr√©sentation TDD","content":"## Reference\n\n![odp](/content/ressources/TDD-presentation.odp)\n\n\n![[ressources/TDD - pr√©sentation.odp]]","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/kata/bowling":{"title":"Bowling","content":"## Description du kata\nNous souhaitons calculer le **score final** d'une partie de **bowling**. Pour cela, nous allons cr√©er une application qui nous permettra de simuler une partie de bowling pour un joueur.\n\n### R√®gles du bowling\n- Une partie de bowling se divise en **10 carreaux** (**frame** en anglais).\n- Chaque carreau d√©marre avec **10 quilles √† faire tomber** (**pin** en anglais)\n- Un carreau se termine dans l'une des conditions suivantes :\n\t- 2 lancers ont √©t√© effectu√©s (**roll** en anglais)\n\t- les 10 quilles sont tomb√©es\n- on **ajoute au score le nombre de quilles tomb√©s lors du carreau**\n- un abat se produit lorsqu'on fait tomber les **10 quilles au premier lancer du carreau** (**strike** en anglais)\n- lors d'un abat, on ajoute au score du carreau un **bonus** qui correspond aux nombres de quilles tomb√©es lors **des deux prochains lancers**\n- une r√©serve se produit lorsqu'on fait les **10 quilles au second lancer du carreau** (**spare** en anglais)\n- lors d'une r√©serve, on ajoute au score du carreau un **bonus** qui correspond aux nombres de quilles tomb√©es **lors du prochain lancer**\n- si l'on fait un abat lors du dixi√®me carreau, on a **deux lancers suppl√©mentaires** pour calculer le bonus\n- si l'on fait une r√©serve lors du dixi√®me carreau, on a **un lancer suppl√©mentaire** pour calculer le bonus\n\n## Pour d√©marrer : \n### Compr√©hension des r√®gles m√©tiers\nIl est important de montrer que l'on a bien compris les exigences m√©tiers. Comment peux-tu le prouver ?\n\nVois avec un pair si ta d√©monstration permet de montrer que tu as compris l'exercice\n\n### Point de d√©part\nTu vas impl√©menter une classe `Bowling` qui aura les deux m√©thodes suivantes : \n- `void roll(int pins)` : cette m√©thode permet d'enregistrer un lancer\n- `int score()` : cette m√©thode donne le score de la partie une fois **celle-ci termin√©e**.\n\n## Objectifs : \nVoici une liste d'objectifs que l'on peut se fixer lors de l'exercice. Tu peux s√©lectionner un ou plusieurs objectifs au fur et √† mesure que tu √©volues sur l'exercice.\n\n- Terminer l'exercice\n- Terminer l'exercice avec TDD\n- Contrainte de vitesse\n\t- en moins de 45 minutes\n\t- en moins de 30 minutes\n- Effectuer un refactoring qui permette d'am√©liorer la lisibilit√© et d'ajouter de l'abstraction (voir l'avis d'un pair pour validation)\n\n## Organisation de l'entra√Ænement\n- R√©aliser le kata sans TDD (optionnel)\n- R√©aliser le kata avec TDD\n- Lire l'√©tude d√©taill√©e / Etudier la pratique d'autres d√©veloppeurs\n- R√©aliser le kata jusqu'√† le ma√Ætriser\n\n## R√©f√©rences\n### Internes\n- [[blog/etude du kata bowling - one test|Etude du kata bowling en un seul test]]\n\n### Externes\n- http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata\n- https://sites.google.com/site/unclebobconsultingllc/home/articles/the-bowling-game-an-example-of-test-first-pair-programming","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/kata/fizzbuzz":{"title":"fizzbuzz","content":"Nous souhaitons cr√©er une application qui nous permettent de d√©terminer la valeur **fizzbuzz** d'un nombre. \n\nLes r√®gles m√©tiers de cette application sont les suivantes : \n- elle doit indiquer  `fizz` si le nombre est une multiple de 3\n- elle doit indiquer  `buzz` si le nombre est une multiple de 5\n- si le nombre est multiple de 3 et de 5, elle doit indiquer `fizzbuzz`\n- si le nombre n'est multiple ni de 3, ni de 5, elle doit indiquer le nombre\n\n## Pour d√©marrer : \n### Compr√©hension des r√®gles m√©tiers\nIl est important de montrer que l'on a bien compris les exigences m√©tiers. Comment peux-tu le prouver ?\n\nVois avec un pair si ta d√©monstration permet de montrer que tu as compris l'exercice\n\n\n### Piste de d√©part\nL'application peut avoir la forme que l'on souhaite, mais voici un point de d√©marrage simple √† mettre en place : \n\nCr√©er une fonction qui s'appelle `fizzbuzz` et qui accepte un entier en param√®tre.  \nElle doit retourner une chaine de caract√®res qui r√©pond aux exigences m√©tiers d√©finies ci-dessus.\n\n## Objectifs : \n\nVoici une liste d'objectifs que l'on peut se fixer lors de l'exercice. Tu peux s√©lectionner un ou plusieurs objectifs au fur et √† mesure que tu √©volues sur l'exercice.\n\n- Terminer l'exercice\n- Contrainte de vitesse\n\t- en moins de 30 minutes\n\t- en moins de 15 minutes\n- Effectuer un refactoring qui permette d'am√©liorer la lisibilit√© (voir l'avis d'un pair pour validation)\n- Effectuer un refactoring qui permette d'am√©liorer l'√©volution de l'application, par exemple, en permettant d'ajouter la gestion des multiples de 7 qui doit indiquer `foo` (voir l'avis d'un pair pour validation)\n\n## Organisation de l'entra√Ænement\n- R√©aliser le kata sans TDD (optionnel)\n- R√©aliser le kata avec TDD\n- Lire l'√©tude d√©taill√©e / Etudier la pratique d'autres d√©veloppeurs\n- R√©aliser le kata jusqu'√† le ma√Ætriser","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/kata/minesweeper":{"title":"minesweeper","content":"## Description du kata\nNous allons jouer au d√©mineur (minesweeper en anglais). L'id√©e de ce kata est de proposer une application qui permette d'indiquer la position des mines et calculer le nombre de mines adjacentes aux cases vides.\n\n## Pour d√©marrer : \n### Compr√©hension des r√®gles m√©tiers\nIl est important de montrer que l'on a bien compris les exigences m√©tiers. Comment peux-tu le prouver ?\n\nVois avec un pair si ta d√©monstration permet de montrer que tu as compris l'exercice.\n\n### Piste de d√©part\nNous allons faire une fonction `solve_field` qui re√ßoit en entr√©e une cha√Æne de caract√®res contenant le champ de mines (sous forme de rectangle). Elle retourne une cha√Æne de caract√®res contenant le champ de mines r√©solus.\n\nPar exemple, si tu as en entr√©e  : \n```\n*...\n....\n.*..\n....\n```\n\ntu auras en sortie : \n```\n*100\n2210\n1*10\n1110\n```\n\n## Objectifs\nVoici une liste d'objectifs que l'on peut se fixer lors de l'exercice. Tu peux s√©lectionner un ou plusieurs objectifs au fur et √† mesure que tu √©volues sur l'exercice.\n\n- Terminer l'exercice\n- Terminer l'exercice avec TDD\n- Travailler seulement avec des fonctions\n- Travailler avec des classes\n- Utiliser un adapteur pour pouvoir recevoir autre chose que des cha√Ænes de caract√®res\n- Ne pas utiliser de type primitif en entr√©e et en sortie\n\t- Les faire dispara√Ætre par refactoring apr√®s que l'exercice soit termin√©\n\t- Ne pas les utiliser d√®s le d√©part \n- Contrainte de vitesse\n\t- en moins de 30 minutes\n\t- en moins de 15 minutes\n\n## Organisation de l'entra√Ænement\n- R√©aliser le kata sans TDD (optionnel)\n- R√©aliser le kata avec TDD\n- Lire l'√©tude d√©taill√©e / Etudier la pratique d'autres d√©veloppeurs\n- R√©aliser le kata jusqu'√† le ma√Ætriser\n\n## Etude d√©taill√©e du kata\nEn cours de r√©alisation\n\n## R√©f√©rences\n- https://codingdojo.org/kata/Minesweeper/","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/kata/string-calculator":{"title":"string calculator","content":"## Description du kata\nKata string calculator est un kata incr√©mental. Il est d√©compos√© en plusieurs parties qu'il faut faire les unes apr√®s les autres.\n\nL'objectif du kata est de cr√©er une calculatrice qui permet de sommer plusieurs nombres.\n\n\n## Pour d√©marrer : \n### Compr√©hension des r√®gles m√©tiers\nIl est important de montrer que l'on a bien compris les exigences m√©tiers. Comment peux-tu le prouver ?\n\nVois avec un pair si ta d√©monstration permet de montrer que tu as compris l'exercice\n\n### Piste de d√©part\n**Attention, tant que cela n'est pas demand√©, tu n'as pas besoin de g√©rer des valeurs invalides.**\n\n#### Etape 1 - Additionner 0, 1 ou 2 nombres\n\nVous devez cr√©er une m√©thode  `calculate` avec la signature suivante :\n\n`int calculate(string expression)`\n\n`expression` est une cha√Æne de caract√®res qui peut accepter 0, 1 ou deux nombres entiers s√©par√©s par une virgule. La m√©thode `calculate` doit renvoyer la somme de ces nombres.\n\nPar exemple\n```java\ncalculate(\"0\") // doit retourner 0\ncalculate(\"1\") // doit retourner 1\ncalculate(\"153\") // doit retourner 153\ncalculate(\"23,541\") // doit retourner 564\n```\n\nLa cha√Æne vide est un cas particulier. On doit retourner la valeur 0.\n```java\ncalculate(\"\") // doit retourner 0`\n```\n\n\n#### Etape 2 - Additionner plusieurs nombres\n\nVous devez am√©liorer la m√©thode `calculate` pour que le param√®tre `expression` puisse √©galement recevoir plusieurs nombres\n\nPar exemple\n```java\ncalculate(\"1,3,154\") // doit renvoyer 158\ncalculate(\"100,30,24,2\") // doit renvoyer 156\n```\n\n\u003e Astuce : vous avez termin√© le d√©veloppement lorsque vous ex√©cutez `calculate` avec un nombre suppl√©mentaire et que la fonction renvoie la bonne valeur\n\n\n#### Etape 3 - Calculer sur plusieurs lignes\n\nLes nombres du param√®tre `expression` peuvent d√©sormais √™tre indiqu√©s sur plusieurs lignes. La m√©thode `calculate` doit prendre en compte les retours chariots dans le calcul.\n\nPar exemple\n```java\ncalculate(\"1\\n2\") // doit renvoyer 3\ncalculate(\"1,2\\n3\") // doit renvoyer 6\ncalculate(\"1\\n2,4\") // doit renvoyer 7\n\ncalculate(\"1,\\n) // cette utilisation est invalide. Pour info, il ne faut pas g√©rer le fait que l'expression est invalide.\n```\n\n\n#### Etape 4 - G√©rer les expressions invalides\n\nCette √©tape est facultative et peut √™tre g√©r√©e plus tard. Cependant, traiter les expressions invalides √† cette √©tape permet de simplifier la suite du kata.\n\nUne expression est invalide lorsqu'un des √©l√©ments n'est pas un nombre. La m√©thode doit d√©clencher une exception dans ce cas.\n\nLe message de l'exception est : \"Invalid expression :\" suivi de l'expression invalide.\n\nPar exemple:\n``` \ncalculate(\"1,\") // doit d√©clencher l'exception : Invalid expression : '1,'\n```\n\n\u003e Attention ! La cha√Æne vide est autoris√©e. On doit renvoyer 0 dans ce cas.\n\n\n#### Etape 5 - Changer le d√©limiteur par d√©faut\n\nOn doit maintenant pouvoir changer le d√©limiteur par d√©faut (la virgule `,`)  par un autre d√©limiteur. Pour cela, on va autoriser la syntaxe suivante pour le param√®tre `expression`. Cette nouvelle syntaxe est optionnelle : \n\n`//[delimiter]\\n[numbers‚Ä¶]` o√π \n* `[delimiter]` correspond au d√©limiteur sur un seul caract√®re\n* `[numbers]` correspond √† la liste des nombres √† aditionner\n\n\u003e Attention ! Toutes les pr√©c√©dentes expressions doivent toujours fonctionner.\n\n\nPar exemple\n```java\ncalculate(\"//;\\n1;2\") // doit renvoyer 3\ncalculate(\"//;\\n1;2\\n3\") // doit renvoyer 6\ncalculate(\"//;\\n102\") // doit renvoyer 102\ncalculate(\"//@\\n10@20@30\") // doit renvoyer 60\n\n// Les pr√©c√©dentes expressions doivent toujours fonctionner\ncalculate(\"1,2\") // doit renvoyer 3\n\ncalculate(\"//;\\n102,5\") // cette utilisation est invalide. Le s√©parateur par d√©faut est ; et non plus ,\n```\n\n\n#### Etape 6 - D√©tecter les nombres n√©gatifs\n\nLa m√©thode `calculate` doit d√©sormais d√©clencher une exception quand `expression` contient un ou plusieurs nombres n√©gatifs.\n\nLe message de l'exception sera `negatives not allowed: ` suivi de la liste des nombres n√©gatifs.\n\nPar exemple : \n```java\ncalculate(\"1,-2\") // doit d√©clencher l'exception : negatives not allowed: -2\ncalculate(\"5,-4,1,-2\") // doit d√©clencher l'exception : negatives not allowed: -4, -2\n```\n\n\n#### Etape 7 - Ignorer les nombres sup√©rieurs √† 1000\n\nLa m√©thode `calculate` doit ignorer les nombres sup√©rieurs √† 1000.\n\nPar exemple : \n```java\ncalculate(\"1000\") // doit renvoyer 1000\ncalculate(\"1001\") // doit renvoyer 0\ncalculate(\"54,1020\") // doit renvoyer 54\n```\n\n\n#### Etape 8 - D√©limiteur de taille variable\n\nLe d√©limiteur personnalis√© peut d√©sormais √™tre de n'importe quelle taille gr√¢ce √† la syntaxe suivante : \n\n`//{[delimiter]}\\n[numbers]` o√π\n* `[delimiter]` est un d√©limiteur de n'importe quelle taille sup√©rieure ou √©gale √† 1\n* `[numbers]` correspond √† la liste des nombres √† aditionner\n\n\u003e Attention, la syntaxe pr√©c√©dente doit toujours fonctionner.\n\nPar exemple : \n```java\ncalculate(\"//{***}\\n5***20\") // doit renvoyer 25 (s√©parateur de 3 caract√®res)\ncalculate(\"//{*}\\n5*20\") // doit renvoyer 25 (s√©parateur de 1 caract√®re)\ncalculate(\"//*\\n5*20\") // doit renvoyer 25 (syntaxe pr√©c√©dente)\n```\n\n#### Etape 9 - Plusieurs d√©limiteurs\n\nIl peut d√©sormais y avoir plusieurs d√©limiteurs personnalis√©s gr√¢ce √† la syntaxe suivante\n\n`//{[delimiter 1]}{[delimiter 2]}\\n[numbers]` o√π\n* `[delimiter 1]` est le premier d√©limiteur de n'importe quelle taille √©gale √† 1\n* `[delimiter 2]` est le second d√©limiteur de n'importe quelle taille √©gale √† 1\n* `[numbers]` correspond √† la liste des nombres √† aditionner\n\nPar exemple : \n```java\n    calculate(\"//{+}{|}\\n5+2|3\") // doit renvoyer 10\n```\n\n#### Etape 10 - Plusieurs d√©limiteurs de taille variable\n\nLes d√©limiteurs personnalis√©s peuvent d√©sormais √™tre de n'importe quelle taille gr√¢ce √† la syntaxe suivante : \n\n`//{[delimiter 1]}{[delimiter 2]}\\n[numbers]` o√π\n* `[delimiter 1]` est le premier d√©limiteur de n'importe quelle taille sup√©rieure ou √©gale √† 1\n* `[delimiter 2]` est le second d√©limiteur de n'importe quelle taille sup√©rieure ou √©gale √† 1\n* `[numbers]` correspond √† la liste des nombres √† aditionner\n\n## Pour aller plus loin\n√† d√©finir\n\n## Objectifs : \nVoici une liste d'objectifs que l'on peut se fixer lors de l'exercice. Tu peux s√©lectionner un ou plusieurs objectifs au fur et √† mesure que tu √©volues sur l'exercice.\n\n- Terminer l'exercice\n- Terminer l'exercice avec TDD\n- Contrainte de vitesse\n\t- en moins de 45 minutes\n\t- en moins de 30 minutes\n- Effectuer un refactoring qui permette d'am√©liorer la lisibilit√© (voir l'avis d'un pair pour validation)\n\n## R√©f√©rences\n### Internes\n- Etude d√©taill√©e : en cours de r√©alisation\n\n### Externes\n- https://kata-log.rocks/string-calculator-kata\n- https://codingdojo.org/kata/StringCalculator/","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (ÊµãËØï)","content":"## Chinese, Japanese, Korean Support\nÂá†‰πéÂú®Êàë‰ª¨ÊÑèËØÜÂà∞‰πãÂâçÔºåÊàë‰ª¨Â∑≤ÁªèÁ¶ªÂºÄ‰∫ÜÂú∞Èù¢„ÄÇ\n\nÏö∞Î¶¨Í∞Ä Í∑∏Í≤ÉÏùÑ ÏïåÍ∏∞ÎèÑ Ï†ÑÏóê Ïö∞Î¶¨Îäî ÎïÖÏùÑ Îñ†ÎÇ¨ÏäµÎãàÎã§.\n\nÁßÅ„Åü„Å°„Åå„Åù„Çå„ÇíÁü•„Çã„Åª„ÅºÂâç„Å´„ÄÅÁßÅ„Åü„Å°„ÅØÂú∞Èù¢„ÇíÈõ¢„Çå„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/config":{"title":"Configuration","content":"## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml\nname: Your name here! # Shows in the footer\nenableToc: true # Whether to show a Table of Contents\nenableLinkPreview: true # whether to render card previews for links\ndescription: Page description to show to search engines\npage_title: Quartz Example Page # Default Page Title\n\nlinks: # Links to show in footer\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml\nenableLegend: false # automatically generate a legend\nenableDrag: true # allow dragging nodes in the graph\nenableZoom: true # allow zooming and panning the graph\ndepth: -1 # how many neighbours of the current node to show (-1 is all nodes)\npaths: # colour specific nodes path off of their path\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what actually gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Multilingual\n[CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'ŸÖÿØŸàŸÜÿ™Ÿä'\n    weight = 1\n```","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"---\n\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\nüîó [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n‚ùå [Excluding pages from being published](notes/ignore%20notes.md)\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.*\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```markdown","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"---\n\n## GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`.\n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`.\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"---\n\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always e Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recomment `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\u003e ‚Äú[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.‚Äù ‚Äî Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"If you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```shell\n# Install and link `hugo-obsidian` locally\n$ go install github.com/jackyzha0/hugo-obsidian@latest\n\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Scrape all links in your Quartz folder and generate info for Quartz\n$ hugo-obsidian -input=content -output=assets/indices -index -root=.\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\n$ hugo server\n\n# View your site in a browser at http://localhost:1313/\n```","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/setup":{"title":"Setup","content":"## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\nüìÅ [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\n$ git clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n‚úèÔ∏è [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Updating\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n\n# or, if you don't want the interactive parts and just want the update\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e ‚ö†Ô∏è **WARNING** ‚ö†Ô∏è\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"Want to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://garden.jzhao.xyz/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\nüêõ [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-08-15T06:52:53.129058804Z","tags":null},"/wiki/ApprovalTests":{"title":"ApprovalsTests","content":"## Reference\n* https://approvaltests.com/","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/DDD":{"title":"Domain Driven Design (DDD)","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/TDD":{"title":"TDD","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/architecture-hexagonale":{"title":"architecture hexagonale","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/event-sourcing":{"title":"event sourcing","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/extract-method":{"title":"extract method","content":"## Reference\n- https://refactoring.guru/fr/extract-method","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/extract-parameter":{"title":"extract parameter","content":"## Reference","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/extract-variable":{"title":"Extract variable","content":"## R√©f√©rence\nhttps://refactoring.guru/fr/extract-variable","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/gilded-rose":{"title":"Untitled Page","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/inline-variable":{"title":"inline variable","content":"## Reference\n* https://refactoring.guru/fr/inline-temp","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null},"/wiki/rust":{"title":"rust","content":"","lastmodified":"2022-08-15T06:52:53.133058821Z","tags":null}}