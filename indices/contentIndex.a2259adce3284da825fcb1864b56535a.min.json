{"/":{"title":"ü™¥ ytreza.dev","content":"Bienvenue sur mon blog.\n\nJe m'appelle Jonathan LAURENT et je vais partager avec toi les diff√©rentes connaissances que j'ai accumul√©.\n\nTu peux voir :\n- [[/blog|mon blog]]\n- [[/wiki|le wiki]]\n\nSi tu veux me contacter : \n- par mail : contact@ytreza.dev\n- twitter : https://twitter.com/Johjo07\n- linkedin : https://www.linkedin.com/in/jonathan-laurent/","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/Cr%C3%A9er-une-application-todolist":{"title":"Cr√©er une application todolist","content":"Je suis actuellement en train de me former √† [[wiki/rust|rust]] ainsi qu'au [[wiki/DDD|ddd]]. J'ai donc d√©cid√© de d√©marrer une s√©rie de billets de blog. Je d√©taillerai ma d√©marche au fur et √† mesure.\n\nLes th√®mes abord√©s que j'ai actuellement en t√™te sont les suivants : \n- La m√©thode [[wiki/TDD|TDD]]\n- Le langage [[wiki/rust|rust]] et certaines de ses librairies\n\t- actix-web\n\t- serde\n- L'[[wiki/architecture hexagonale|architecture hexagonale]]\n- Le [[wiki/DDD|Domain Driven Design]] et ses patterns tactiques\n\t- comme l'[[wiki/event sourcing|event sourcing]]\n- et je ne sais quoi encore.\n\nCes billets me serviront pour me rappeler les d√©cisions que j'ai prise lorsque je travaillerai sur d'autres projets.\n\nIl est probable que je recommence ce projet plusieurs fois. L'id√©e n'√©tant pas de finir l'application, mais plut√¥t de cr√©er une application ayant une base de code propre, solide, qui r√©ponde √† mes crit√®res de qualit√©.\n\nLet's go !\n\nListe des billets : \n- [[blog/draft/todolist - la premi√®re fonctionnalit√©|la premi√®re fonctionnalit√©]]","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/Kata-Kumite-Koan-et-Dreyfus":{"title":"Kata, Kumite, Koan et Dreyfus","content":"# Kata, Kumite, Koan et Dreyfus\n\nExcellent article sur les notions de Kata, Kumite, Koan repris des arts martiaux (le karat√© dans l'article de r√©f√©rence) et la notation Dreyfus.\n\n## Kata\nLe \"ma√Ætre\" montre des mouvements et l'√©tudiant essaie de les recopier. Cette id√©e \nest int√©ressante au d√©but de l'apprentissage car l'√©tudiant ne connait pas encore le pourquoi.\n\nCependant, lorsque l'√©tudiant a atteint un certain niveau, il peut utiliser les katas pour s'approprier les mouvements.\n\n## Kumite\nDeux apprenants, ou le \"ma√Ætre\" et un apprenant travaillent ensemble. Cette √©tape est id√©ale lorsque l'apprenant ma√Ætrise des mouvements issus des katas. Si le kata est plut√¥t statique, le kumite permet d'avoir des encha√Ænements dynamique.\n\nL'apprenant doit apprendre √† ne plus se focaliser sur une seule chose. Il doit s'adapter √† chaque situation car il ne travaille plus seul.\n\n## Koan\nIci, la notion de koan est diff√©rente de celle que je connais.\n\nDans ma d√©finition, l'apprenant doit r√©soudre des probl√®mes √† trous. On peut le faire en proposant des tests unitaires d√©j√† √©crits (√©tape RED) et les faire passer (√©tape GREEN).\n\nDans l'article, ce sont plut√¥t des questions que l'on se pose. Celles-ci n'ont pas forc√©ment de meilleure r√©ponse. La r√©ponse n'est d'ailleurs pas importante. C'est surtout la question et la r√©flexion qu'elle engendre qui ont de l'importance.\n\n## Notation Dreyfus\nLa notation Dreyfus est constitu√©e de 5 √©tapes dans l'acquisition des comp√©tences : \n\n1.  Novice\n2.  D√©butant avanc√©\n3.  Comp√©tent\n4.  Efficace\n5.  Expert\n\nD'apr√®s l'article, on d√©marre √† l'√©tape de Novice. A ce stade, on ne comprend pas forc√©ment le pourquoi.\n\nDans les 3 √©tapes qui suivent, l'apprenant comprend de mieux en mieux et devient de plus en plus autonome. \n\nLorsqu'il devient un expert, la comp√©tence est inscrite au coeur de la personne et peut se fier √† son intuition plut√¥t qu'aux r√®gles qui d√©finissent la comp√©tence. Au contraire, elle peut red√©finir et am√©liorer la comp√©tence.\n\n\n## R√©f√©rences\n- http://codekata.com/kata/kata-kumite-koan-and-dreyfus/","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/Ma%C3%AEtriser-les-refactorings-de-base":{"title":"Ma√Ætriser les refactorings de base","content":"A force de pratiquer le refactoring, j'ai constat√© une chose. La loi de pareto s'applique. Voyons voir ce que cela signifie.\n\n20 % (voire moins) des patterns de refactoring concerne 80 % (voir plus) des actions de refactoring que je pratique. Ce sont des refactorings de bases.\n\nVoici la liste : \n- [[wiki/extract variable|extract variable]] / [[wiki/inline variable|inline variable]]\n- [[wiki/extract parameter|extract parameter]] / [[wiki/inline parameter|inline parameter]]\n- [[wiki/extract method|extract method]] / [[wiki/inline methode|extract method]]\n- [[wiki/extract class/extract method]]\n\n## Comment apprendre ces diff√©rents refactoring ?\nJ'ai appris ces diff√©rents refactorings en pratiquant des [[wiki/kata|katas]] et en m'attardant sur le refactoring step by step.\n\nMon conseil, essaye de pratiquer pendant 1 mois 2 (voire 3 ou 4) katas diff√©rents jusqu'√† les ma√Ætriser.\n- tu y passes 30 minutes par jour\n- si tu bloques, tu jettes le code et tu recommences\n- lorsque tu recommences, tu peux essayer de faire diff√©rement\n- tu demandes l'avis des autres\n- tu regardes comment font les autres\n\nSi tu fais cet effort, je suis certain que tu en seras r√©compens√©.\n\nBon courage !","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/Spectral-petit-pi%C3%A8ge-lorsquon-v%C3%A9rifie-quun-vecteur-contient-un-str-au-lieu-dun-string":{"title":"Spectral - petit pi√®ge lorsqu'on v√©rifie qu'un vecteur contient un str au lieu d'un string","content":"---\n\nLorsqu'on utilise spectral et que l'on veut v√©rifier qu'un `Vec` contient bien une `String`, on peut parfois aller trop vite et √©crire le code suivant : \n\n```rust\n#[cfg(test)]  \nmod test {  \n    use spectral::prelude::*;  \n  \n    #[test]  \n    fn test_spectral_with_vec() {  \n        let v = vec![\"abc\".to_string(), \"def\".to_string()];  \n        assert_that!(v).contains(\"abc\");  \n    }  \n}\n```\n\nLorsqu'on execute le test, on obtient cette erreur, qui est assez indigeste.\n\n```\nerror[E0277]: the trait bound `\u0026str: Borrow\u003cString\u003e` is not satisfied\n  --\u003e src\\main.rs:8:34\n   |\n8  |         assert_that!(v).contains(\"abc\");\n   |","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/cmd-Envoyer-des-commandes-%C3%A0-une-application-cli":{"title":"cmd : Envoyer des commandes √† une application cli","content":"Cr√©er un fichier command.txt qui contient les commandes \n\n```\nload(\"hello\")\nmain()\nq\n```\n\npuis lancer les commandes avec \n```\ncclaire.exe \u003c command.txt\n```\n\n\n\n## R√©f√©rences\n* https://stackoverflow.com/questions/10552812/defining-and-using-a-variable-in-batch-file","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/etude-du-kata-bowling-one-test":{"title":"Etude du kata bowling (en un seul test)","content":"Aujourd'hui, nous allons √©tudier le [[kata/bowling|kata bowling]]. Mais nous allons le faire d'une mani√®re un peu diff√©rente :  **avec un seul test**.\n\nNous sortons donc des sentiers battus du TDD pour mettre en √©vidence une technique de d√©veloppement bas√©e sur le refactoring, et en particulier la triche (utilis√©e dans l'√©tape *GREEN*) et la clarification (utilis√©e dans l'√©tape *REFACTORING*).\n\nChaque fois que vous voyez un nouveau morceau de code, les tests (bon, il n'y en aura qu'un seul) sont lanc√©s √† chaque fois. \n\nLe code est pr√©sent√© en mode diff. Les `+` indiquent le code qui a √©t√© ajout√© et les `-` le code qui a √©t√© enlev√©.\n\n## On d√©marre la partie\n\nTout commence donc par un test (le seul test de cette √©tude). \n\n```diff\n+import bowling.Bowling;  \n+import org.junit.Test;  \n+  \n+public class TestBowling {  \n+  \n+    @Test  \n+    public void one_game() {  \n+        Bowling game = new Bowling();  \n+    }  \n+  \n+}\n```\n\nDans l'√©tat, nous sommes donc √† l'√©tape RED, le test √©choue car la classe Bowling n'existe pas. Cr√©ons donc la classe qui va avec :\n\n```diff\n+package bowling;  \n+  \n+public class Bowling {  \n+}\n```\n\nEt nous passons au vert.\n\nNous allons maintenant jouer au bowling. La m√©thode `roll` doit permettre d'indiquer le nombre de quilles que l'on fait tomber √† chaque lancer.\n\nOn rajoute donc au test tous les lancers n√©cessaires pour faire une partie. Il y a des strikes , des spares, des coups normaux... Bref, c'est le genre de partie que je joue quand je suis chanceux ;)\n\n```diff\n@Test  \npublic void one_game() {  \n    Bowling game = new Bowling();  \n  \n+   game.roll(3);  \n+   game.roll(4);  \n+   game.roll(6);  \n+   game.roll(3);  \n+   game.roll(2);  \n+   game.roll(8);  \n+   game.roll(4);  \n+   game.roll(3);  \n+   game.roll(4);  \n+   game.roll(4);  \n+   game.roll(5);  \n+   game.roll(2);  \n+   game.roll(6);  \n+   game.roll(4);  \n+   game.roll(10);  \n+   game.roll(8);  \n+   game.roll(0);  \n+   game.roll(10);  \n+   game.roll(8);  \n+   game.roll(1);  \n  \n}\n```\n\nEt on passe du *RED* au *GREEN* en ajoutant la m√©thode `roll` dans la classe `Bowling`.\n\n```diff\npublic class Bowling {  \n+    public void roll(int pin) {  \n+  \n+    }  \n}\n```\n\nEnfin, on v√©rifie que le score calcul√© est le bon : \n\n```diff\n@Test  \npublic void one_game() {  \n    Bowling game = new Bowling();  \n  \n    game.roll(3);  \n    game.roll(4);  \n    game.roll(6);  \n    game.roll(3);  \n    game.roll(2);  \n    game.roll(8);  \n    game.roll(4);  \n    game.roll(3);  \n    game.roll(4);  \n    game.roll(4);  \n    game.roll(5);  \n    game.roll(2);  \n    game.roll(6);  \n    game.roll(4);  \n    game.roll(10);  \n    game.roll(8);  \n    game.roll(0);  \n    game.roll(10);  \n    game.roll(8);  \n    game.roll(1);  \n  \n+   Assert.assertEquals(117, game.score());  \n}\n```\nOn tombe sur une erreur de compilation (√©tape *RED*), on cr√©e la m√©thode `score` et on fait √©chouer l'assert (toujours *RED*): \n\n```diff\npublic class Bowling {  \n    public void roll(int pin) {  \n  \n    }  \n  \n+   public int score() {  \n+       return -1;  \n+   }  \n}\n```\n\nEt voil√†, on peut rentrer dans le vif du sujet, on a fini de mettre en place nos tests. Nous allons pouvoir tricher all√®grement.\n\n## Je triche, tu triches, nous trichons\nLe passage au vert se fait de la mani√®re la plus simple, en indiquant le r√©sultat attendu.\n\n```diff\npublic int score() {  \n-   return -1;  \t\n+   return 117;  \n}  \n```\nOn passe de l'√©tape *RED* √† l'√©tape *GREEN* en 2 secondes. Voil√†, nous venons de pratiquer ce que j'appelle la **triche**. Indiquer directement dans le code le r√©sultat attendu.\n\n√Ä partir de maintenant, nos tests doivent toujours passer. Nous entrons dans la phase du *REFACTORING*. Et nous n'en ressortirons pas tant que notre algo ne sera pas termin√©.\n\n## Clarifions... Quoi ? Comment ?\n\u003e Dev : C'est bien beau ce 117, mais je ne vois pas d'algo l√†-dedans      \n\u003e Moi : C'est vrai, mais pourtant, l'algo est l√†, mais tu ne le vois pas encore      \n\u003e Dev : ???     \n\u003e Moi : Petite question, c'est quoi ce 117 ?     \n\u003e Dev : 117 ? C'est le score total de ma partie de bowling...     \n\nBingo ! Nous venons d'attaquer la phase de **clarification** qui est une √©tape de la phase de *REFACTORING*. Nous sommes en train de parler du **QUOI**. Et cela nous permet d'introduire un nouveau concept : le score total de la partie (bon, je sais, la m√©thode s'appelle score, c'√©tait facile...). \n\nMettons en √©vidence ce nouveau concept, √† l'aide d'un [[wiki/extract variable|extract variable ]]: \n\n```diff\npublic int score() {  \n-   return 117;  \n+   int score = 117;  \n+   return score;  \n}\n```\n\n\u003eDev : Tu as toujours ce 117...\u003cbr\u003e\n\u003eMoi : C'est vrai, mais comment arrive-t-on √† ce r√©sultat ?\u003cbr\u003e\n\u003eDev : Il faut ajouter le r√©sultat du premier lancer puis du second ....\u003cbr\u003e\n\u003eMoi : C'est vrai, mais ton niveau d'abstraction est trop haut, c'est trop t√¥t pour en parler\u003cbr\u003e\n\u003eDev : ???\u003cbr\u003e\n\u003eMoi : Le r√©sultat du premier lancer, c'est 3 et le second, c'est 4\u003cbr\u003e\n\u003eDev ???????\u003cbr\u003e\n\u003eMoi : 117, c'est √©gal √† 3 + 4 + 6 + ... + 10 + 8 + 1\u003cbr\u003e\n\u003eDev : ?????????????????????\u003cbr\u003e\n\u003eMoi : Oui, pour calculer le score, il faut conna√Ætre les r√®gles du bowling et savoir faire le calcul √† la main\n\n\nSi on traduit cela en code, √ßa nous donne. En guide d'exercice, tu peux repartir de notre jeu de test et voir comment on calcule cela : \n\n```diff\npublic int score() {  \n-   int score = 117;  \n+   int score = 3 + 4 + 6 + 3 + 2 + 8 + 4 + 4 + 3 + 4 + 4 + 5 + 2 + 6 + 4 + 10 + 10 + 8 + 0 + 8 + 0 + 10 + 8 + 1;  \n    return score;  \n}\n```\n\nPour r√©ussir cela, nous avons introduit la notion de **COMMENT**. Mais attention, il ne faut pas changer de niveau d'abstraction trop rapidement. Si c'est possible, on introduit l'un apr√®s l'autre.\n\nOrganisons un peu le code pour faire appara√Ætre le **QUOI**.\n\n```diff\npublic int score() {  \n-   int score = 3 + 4 + 6 + 3 + 2 + 8 + 4 + 4 + 3 + 4 + 4 + 5 + 2 + 6 + 4 + 10 + 10 + 8 + 0 + 8 + 0 + 10 + 8 + 1;  \n\n+   int score = 0;  \n  \n+   score += 3;  \n+   score += 4; \n+   score += 6;  \n+   score += 3;  \n+   score += 2;  \n+   score += 8;  \n+   score += 4;  \n+   score += 4;  \n+   score += 3;  \n+   score += 4;  \n+   score += 4;  \n+   score += 5;  \n+   score += 2;  \n+   score += 6;  \n+   score += 4;  \n+   score += 10;  \n+   score += 10;  \n+   score += 8;  \n+   score += 0;  \n+   score += 8;  \n+   score += 0;  \n+   score += 10;  \n+   score += 8;  \n+   score += 1;  \n  \n    return score;  \n}\n```\n\nEt encore une √©tape (pour rappel, le test passe toujours) : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n+   // frame 1  \n    score += 3; // roll 1  \n    score += 4; // roll 2  \n\t  \n+   // frame 2  \n    score += 6; // roll 3  \n    score += 3; // roll 4  \n\t  \n+   // frame 3  \n    score += 2; // roll 5  \n    score += 8; // roll 6 (spare)  \n    score += 4; // roll 7 (spare bonus)  \n\t  \n+   // frame 4  \n    score += 4; // roll 7  \n    score += 3; // roll 8  \n\t  \n+   // frame 5  \n    score += 4; // roll 9  \n    score += 4; // roll 10  \n\t  \n+   // frame 6  \n    score += 5; // roll 11  \n    score += 2; // roll 12  \n\t  \n+   // frame 7  \n    score += 6; // roll 13  \n    score += 4; // roll 14 (spare) \n    score += 10; // roll 15 (spare bonus)   \n\t  \n+   // frame 8  \n    score += 10; // roll 15 (strike)  \n    score += 8; // roll 16 (strike bonus)  \n    score += 0; // roll 17 (strike bonus)  \n\t  \t  \n+   // frame 9  \n    score += 8; // roll 16  \n    score += 0; // roll 17   \n\t  \n+   // frame 10  \n    score += 10; // roll 18 (strike)  \n    score += 8; // roll 19 (strike bonus)  \n    score += 1; // roll 20 (strike bonus)\n  \n    return score;  \n}\n```\n\nEn s√©parant les diff√©rents lancers, nous faisons appara√Ætre la notion de *frame*, l'un des concepts du bowling. Nous introduisons aussi la notion de strike et de spare ainsi que les bonus respectif.\n\n## Clarifions un peu plus\n\u003e Dev : tu veux encore clarifier ?\n\u003e Moi : oui, mais cette fois, c'est pour enlever de la duplication\n\u003e Dev : de la duplication ??\n\u003e Moi : oui, ces nombres : 3, 4, 6, etc... on les retrouve aussi dans le test \n\u003e Dev : ah oui, c'est vrai... et je suppose que ce sont les m√™mes concepts ?\n\u003e Moi : oui, chaque nombre repr√©sente le nombre de quilles tomb√©es lors d'un lancer.\n\nAllons chercher ces lancers. Ils sont d√©finis dans le test et sont introduits dans notre classe via la m√©thode `roll`.\n\nPour les avoir √† disposition dans notre m√©thode `score`, nous devons les stocker dans un attribut : \n\n```diff\npublic class Bowling {  \n+   List\u003cInteger\u003e rolls = new ArrayList\u003c\u003e();  \n  \n+   public void roll(int pins) {  \n+       rolls.add(pins);  \n+   }  \n  \n    public int score() {  \n        int score = 0;  \n  \n        // frame 1  \n        score += 3;  \n        score += 4;  \n  \n       // ...\n  \n        // frame 10\n        score += 10;  \n        score += 8;  \n        score += 1;  \n  \n        return score;  \n    }  \n}\n```\n\nNous allons maintenant pouvoir les utiliser : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n    // frame 1  \n-   score += 3; // roll 1  \n-   score += 4; // roll 2      \n+   score += rolls.get(0); // roll 1  \n+   score += rolls.get(1); // roll 2  \n  \n    // frame 2\n-   score += 6; // roll 3  \n-   score += 3; // roll 4    \n+   score += rolls.get(2); // roll 3  \n+   score += rolls.get(3); // roll 4  \n  \n    // frame 3\n-   score += 2; // roll 5  \n-   score += 8; // roll 6 (spare)  \n-   score += 4; // roll 7 (spare bonus)      \n+   score += rolls.get(4); // roll 5  \n+   score += rolls.get(5); // roll 6 (spare)  \n+   score += rolls.get(6); // roll 7 (spare bonus)  \n  \n    // frame 4\n-   score += 4; // roll 7  \n-   score += 3; // roll 8     \n+   score += rolls.get(6); // roll 7  \n+   score += rolls.get(7); // roll 8  \n  \n    // frame 5\n-   score += 4; // roll 9  \n-   score += 4; // roll 10    \n+   score += rolls.get(8); // roll 9  \n+   score += rolls.get(9); // roll 10  \n  \n    // frame 6\n-   score += 5; // roll 11  \n-   score += 2; // roll 12          \n+     score += rolls.get(10); // roll 11  \n+   score += rolls.get(11); // roll 12  \n  \n    // frame 7\n-   score += 6; // roll 13  \n-   score += 4; // roll 14 (spare) \n-   score += 10; // roll 15 (spare bonus)       \n+     score += rolls.get(12); // roll 13  \n+   score += rolls.get(13); // roll 14 (spare)  \n+   score += rolls.get(14); // roll 15 (spare bonus)    \n  \n    // frame 8\n-   score += 10; // roll 15 (strike)  \n-   score += 8; // roll 16 (strike bonus)  \n-   score += 0; // roll 17 (strike bonus)      \n+   score += rolls.get(14); // roll 15 (strike)  \n+   score += rolls.get(15); // roll 16 (strike bonus)  \n+   score += rolls.get(16); // roll 17 (strike bonus)  \n  \n  \n    // frame 9\n-   score += 8; // roll 16  \n-   score += 0; // roll 17      \n+   score += rolls.get(15); // roll 16  \n+   score += rolls.get(16); // roll 17  \n  \n  \n    // frame 10\n-   score += 10; // roll 18 (strike)  \n-   score += 8; // roll 19 (strike bonus)  \n-   score += 1; // roll 20 (strike bonus)-   \n+   score += rolls.get(17); // roll 18 (strike)  \n+   score += rolls.get(18); // roll 19 (strike bonus)  \n+   score += rolls.get(19); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003eDev : Et maintenant ? On fait quoi ?\n\u003eMoi : On continue d'enlever la duplication ! \n\u003eDev : √Ä part le rolls.get, je n'en vois pas...\n\u003eMoi : C'est pourquoi nous allons la mettre en √©vidence\n\nPour mettre en √©vidence la duplication, il faut se servir de son instinct. Il n'y a pas de r√®gle permettant d'y arriver, mais je te propose √ßa : \n\n```diff\npublic int score() {  \n    int score = 0;  \n  \n    // frame 1  \n    score += rolls.get(0); // roll 1  \n-   score += rolls.get(1); // roll 2  \n+   score += rolls.get(0 + 1); // roll 2  \n  \n    // frame 2\n    score += rolls.get(2); // roll 3  \n-   score += rolls.get(3); // roll 4  \n+   score += rolls.get(2 + 1); // roll 4  \n  \n    // frame 3\n    score += rolls.get(4); // roll 5  \n-   score += rolls.get(5); // roll 6 (spare)  \n-   score += rolls.get(6); // roll 7 (spare bonus)  \n+   score += rolls.get(4 + 1); // roll 6 (spare)  \n+   score += rolls.get(4 + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n    score += rolls.get(6); // roll 7  \n-   score += rolls.get(7); // roll 8  \n+   score += rolls.get(6 + 1); // roll 8  \n  \n    // frame 5    \n    score += rolls.get(8); // roll 9  \n-   score += rolls.get(9); // roll 10  \n+   score += rolls.get(8 + 1); // roll 10  \n  \n    // frame 6    \n    score += rolls.get(10); // roll 11  \n-   score += rolls.get(11); // roll 12  \n+   score += rolls.get(10 + 1); // roll 12  \n  \n    // frame 7    \n    score += rolls.get(12); // roll 13  \n-   score += rolls.get(13); // roll 14  \n-   score += rolls.get(14); // roll 15  \n+   score += rolls.get(12 + 1); // roll 14  \n+   score += rolls.get(12 + 2); // roll 15  \n  \n    // frame 8    \n    score += rolls.get(14); // roll 15 (strike)  \n-   score += rolls.get(15); // roll 16 (strike bonus)  \n-   score += rolls.get(16); // roll 17 (strike bonus)  \n+   score += rolls.get(14 + 1); // roll 16 (strike bonus)  \n+   score += rolls.get(14 + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n    score += rolls.get(15); // roll 16\n-   score += rolls.get(16); // roll 17        \n+   score += rolls.get(15 + 1); // roll 17  \n  \n  \n    // frame 10    \n    score += rolls.get(17); // roll 18 (strike) \n-   score += rolls.get(18); // roll 19 (strike bonus)  \n-   score += rolls.get(19); // roll 20 (strike bonus)  \n+   score += rolls.get(17 + 1); // roll 19 (strike bonus)  \n+   score += rolls.get(17 + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\nJ'exprime l'indice de chaque lancer en fonction du premier lancer du frame. Ce qui va nous permettre d'introduire la notion de *frame index*. Chaque *frame* commence √† son premier lancer. Le *frame index* correspond √† l'index de ce lancer. Voyons voir ce que √ßa donne : \n\n```diff\npublic int score() {  \n    int score = 0;  \n+   int frameIndex = 0;  \n  \n    // frame 1  \n-   score += rolls.get(0); // roll 1\n-   score += rolls.get(0 + 1); // roll 2\n+   frameIndex = 0;  \n+   score += rolls.get(frameIndex); // roll 1  \n+   score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   score += rolls.get(2); // roll 3\n-   score += rolls.get(2 + 1); // roll 4\n+   frameIndex = 2;  \n+   score += rolls.get(frameIndex); // roll 3  \n+   score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   score += rolls.get(4); // roll 5\n-   score += rolls.get(4 + 1); // roll 6 (spare)\n-   score += rolls.get(4 + 2); // roll 7 (spare bonus)    \n+   frameIndex = 4;  \n+   score += rolls.get(frameIndex); // roll 5  \n+   score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n+   score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   score += rolls.get(6); // roll 7\n-   score += rolls.get(6 + 1); // roll 8    \n+   frameIndex = 6;  \n+   score += rolls.get(frameIndex); // roll 7  \n+   score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   score += rolls.get(8); // roll 9\n-   score += rolls.get(8 + 1); // roll 10    \n+   frameIndex = 8;  \n+   score += rolls.get(frameIndex); // roll 9  \n+   score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   score += rolls.get(10); // roll 11\n-   score += rolls.get(10 + 1); // roll 12\n+   frameIndex = 10;  \n+   score += rolls.get(frameIndex); // roll 11  \n+   score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   score += rolls.get(12); // roll 13\n-   score += rolls.get(12 + 1); // roll 14\n-   score += rolls.get(12 + 2); // roll 15    \n+   frameIndex = 12;  \n+   score += rolls.get(frameIndex); // roll 13  \n+   score += rolls.get(frameIndex + 1); // roll 14  \n+   score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   score += rolls.get(14); // roll 15 (strike)\n-   score += rolls.get(14 + 1); // roll 16 (strike bonus)\n-   score += rolls.get(14 + 2); // roll 17 (strike bonus)\n+   frameIndex = 14;  \n+   score += rolls.get(frameIndex); // roll 15 (strike)  \n+   score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n+   score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   score += rolls.get(15); // roll 16\n-   score += rolls.get(15 + 1); // roll 17    \n+   frameIndex = 15;  \n+   score += rolls.get(frameIndex); // roll 16  \n+   score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   score += rolls.get(17); // roll 18 (strike)\n-   score += rolls.get(17 + 1); // roll 19 (strike bonus)\n-   score += rolls.get(17 + 2); // roll 20 (strike bonus)\n+   frameIndex = 17;  \n+   score += rolls.get(frameIndex); // roll 18 (strike)  \n+   score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n+   score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003eDev : Ah oui ! Je la vois maintenant. On fait une boucle ?\n\u003eMoi : Ton instinct te dit qu'il y a une boucle, mais c'est encore trop t√¥t.\n\u003eDev : Pourquoi ? Les blocs se ressemblent !\n\u003eMoi : Ils se ressemblent, mais ils ne sont pas identiques. Il faut continuer √† clarifier.\n\u003eDev : Qu'est-ce qu'on fait alors ?\n\u003eMoi : Ce que l'on fait depuis le d√©but, on clarifie puis on met en √©vidence la duplication.\n\nEffectivement, il est trop t√¥t pour introduire une boucle. Clarifions le concept de `frameIndex` : \n\n```diff\npublic int score() {  \n    int score = 0;  \n    int frameIndex = 0;  \n  \n    // frame 1  \n    frameIndex = 0;  \n    score += rolls.get(frameIndex); // roll 1  \n    score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   frameIndex = 2;  \n+   frameIndex = 0 + 2;  \n    score += rolls.get(frameIndex); // roll 3  \n    score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   frameIndex = 4;  \n+   frameIndex = 2 + 2;  \n    score += rolls.get(frameIndex); // roll 5  \n    score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n    score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   frameIndex = 6;  \n+   frameIndex = 4 + 2;  \n    score += rolls.get(frameIndex); // roll 7  \n    score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   frameIndex = 8;  \n+   frameIndex = 6 + 2;    \n    score += rolls.get(frameIndex); // roll 9  \n    score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   frameIndex = 10;  \n+   frameIndex = 8 + 2;  \n    score += rolls.get(frameIndex); // roll 11  \n    score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   frameIndex = 12;  \n+   frameIndex = 10 + 2;  \n    score += rolls.get(frameIndex); // roll 13  \n    score += rolls.get(frameIndex + 1); // roll 14  \n    score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   frameIndex = 14;  \n+   frameIndex = 12 + 2;  \n    score += rolls.get(frameIndex); // roll 15 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   frameIndex = 15;\n+   frameIndex = 14 + 1;  \n    score += rolls.get(frameIndex); // roll 16  \n    score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   frameIndex = 17;  \n+   frameIndex = 15 + 2;  \n    score += rolls.get(frameIndex); // roll 18 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\nPuis mettons en √©vidence la duplication : \n\n```diff\npublic int score() {  \n    int score = 0;  \n    int frameIndex = 0;  \n  \n    // frame 1  \n    frameIndex = 0;  \n    score += rolls.get(frameIndex); // roll 1  \n    score += rolls.get(frameIndex + 1); // roll 2  \n  \n    // frame 2   \n-   frameIndex = 0 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 3  \n    score += rolls.get(frameIndex + 1); // roll 4  \n  \n    // frame 3\n-   frameIndex = 2 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 5  \n    score += rolls.get(frameIndex + 1); // roll 6 (spare)  \n    score += rolls.get(frameIndex + 2); // roll 7 (spare bonus)  \n  \n    // frame 4    \n-   frameIndex = 4 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 7  \n    score += rolls.get(frameIndex + 1); // roll 8  \n  \n    // frame 5    \n-   frameIndex = 6 + 2;    \n+   frameIndex = frameIndex + 2;    \n    score += rolls.get(frameIndex); // roll 9  \n    score += rolls.get(frameIndex + 1); // roll 10  \n  \n    // frame 6    \n-   frameIndex = 8 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 11  \n    score += rolls.get(frameIndex + 1); // roll 12  \n  \n    // frame 7    \n-   frameIndex = 10 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 13  \n    score += rolls.get(frameIndex + 1); // roll 14  \n    score += rolls.get(frameIndex + 2); // roll 15  \n  \n    // frame 8   \n-   frameIndex = 12 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 15 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)  \n  \n  \n    // frame 9    \n-   frameIndex = 14 + 1;  \n+   frameIndex = frameIndex + 1;  \n    score += rolls.get(frameIndex); // roll 16  \n    score += rolls.get(frameIndex + 1); // roll 17  \n  \n  \n    // frame 10    \n-   frameIndex = 15 + 2;  \n+   frameIndex = frameIndex + 2;  \n    score += rolls.get(frameIndex); // roll 18 (strike)  \n    score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)  \n    score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)  \n  \n    return score;  \n}\n```\n\n\u003e Dev : Et ensuite ?\n\u003e Moi : On va continuer de clarifier en introduisant la notion de bonus. On va de nouveau utiliser le refactoring Extract variable.\n\nLa notion de bonus appara√Æt lorsqu'on a un *strike* (les deux prochains lancers sont ajout√©s en bonus) ou lors d'un *spare* (le prochain lancer est ajout√© en bonus). On va donc faire un extract variable sur ce calcul pour faire appara√Ætre le concept.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n+   int bonus = 0;\n    \n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   score += rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n-   score += rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n-   score += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n+   bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n     score += rolls.get(frameIndex + 1); // roll 17\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n-   score += rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n-   score += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n+   bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   score += bonus;\n\n   return score;\n}\n```\n\n\u003e Dev : C'est bien beau ce concept de bonus, mais on ne les voit pas dans tous les blocs !\n\u003e Moi : Et donc ?\n\u003e Dev : Les blocs se ressemblent moins apr√®s ta modification !\n\u003e Moi : Tu as tout √† fait raison, mais rien ne nous interdit d'introduire la notion de bonus pour les frames standard\n\nEn effet, nous avons un concept qui n'apparait que dans certains cas. Ce concept est assez simple et peut-√™tre repr√©sent√© dans notre algorithme. \n\n```diff\n    public int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n+   bonus = 0;\n+   score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n    bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n    bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n+   bonus = 0;\n+   score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n    bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n    bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n    score += bonus;\n\n    return score;\n}\n```\n\n\u003e Dev : G√©nial ! Dans chaque bloc, on a une ligne qui se ressemble. Mais le bonus se calcule toujours diff√©rement...\n\u003e Moi : C'est vrai, apr√®s la clarification, mettons en √©vidence la duplication\n\u003e Dev : Pas facile...\n\u003e Moi : Dans quel cas le bonus est √©quivalent au prochain lancer ?\n\u003e Dev : Lorsqu'on fait un spare\n\u003e Moi : Et dans quel cas le bonus vaut les deux prochains lancers ?\n\u003e Dev : Lors d'un strike !\n\u003e Moi : Et pour un bonus de z√©ro ?\n\u003e Dev : Dans les autres cas !\n\nPour d√©tecter un *strike*, il faut v√©rifier la somme du premier lancer. S'il vaut `10`, c'en est un. Pour un *spare*, c'est la somme des deux lancers qui doit valoir `10`. Dans les autres cas, on n'a pas de bonus (ou un bonus qui vaut `0`).\n\nMettons en √©vidence la duplication : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n-   bonus = rolls.get(frameIndex + 2); // roll 7 (spare bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   bonus = rolls.get(frameIndex + 2); // roll 15 (spare bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n-   bonus = rolls.get(frameIndex + 1); // roll 16 (strike bonus)\n-   bonus += rolls.get(frameIndex + 2); // roll 17 (strike bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n-   bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n-   bonus = rolls.get(frameIndex + 1); // roll 19 (strike bonus)\n-   bonus += rolls.get(frameIndex + 2); // roll 20 (strike bonus)\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n    score += bonus;\n\n    return score;\n}\n```\n\n\u003e Dev : Le code est beaucoup plus lourd comme √ßa...\n\u003e Moi : C'est vrai. On peut le simplfiier en ajoutant une abstraction sur le calcul du bonus.\n\u003e Dev : Comment peut-on faire √ßa ?\n\u003e Moi : C'est simple, avec le refactoring extract method.\n\nNous sommes assez avanc√©s pour extraire le concept de calcul de bonus. Pour cela, nous allons faire un [[wiki/extract method|extract method]]. Cela consiste √† cr√©er une fonction √† partir d'un bloc de code.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n\n    // frame 1\n    frameIndex = 0;\n    score += rolls.get(frameIndex); // roll 1\n    score += rolls.get(frameIndex + 1); // roll 2\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 3\n    score += rolls.get(frameIndex + 1); // roll 4\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 5\n    score += rolls.get(frameIndex + 1); // roll 6 (spare)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 7\n    score += rolls.get(frameIndex + 1); // roll 8\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 9\n    score += rolls.get(frameIndex + 1); // roll 10\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 11\n    score += rolls.get(frameIndex + 1); // roll 12\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 13\n    score += rolls.get(frameIndex + 1); // roll 14 (spare)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 15 (strike)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n    score += rolls.get(frameIndex); // roll 16\n    score += rolls.get(frameIndex + 1); // roll 17\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n    score += rolls.get(frameIndex); // roll 18 (strike)\n+   bonus = calculateFrameBonus(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       bonus = rolls.get(frameIndex + 1);\n-       bonus += rolls.get(frameIndex + 2);\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n-       bonus = rolls.get(frameIndex + 2);\n-   else\n-       bonus = 0;\n    score += bonus;\n\n    return score;\n}\n\n+public int calculateFrameBonus(int frameIndex) {\n+   int bonus = 0;\n+   if (rolls.get(frameIndex) == 10) {\n+       bonus = rolls.get(frameIndex + 1);\n+       bonus += rolls.get(frameIndex + 2);\n+   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n+       bonus = rolls.get(frameIndex + 2);\n+   else\n+       bonus = 0;\n+   return bonus;\n+}\n```\n\n\u003e Dev : 70 lignes de moins dans la fonction `score` !\n\u003e Moi : Et ce n'est que le d√©but.\n\u003e Dev : Je pense qu'on va faire la m√™me chose pour le calcul du score sans le bonus.\n\u003e Moi : Bingo, on va encore perdre des lignes, mais que doit-on faire d'abord ?\n\u003e Dev : Mettre en √©vidence le concept puis la duplication.\n\nLe calcul du score (sans le bonus) peut se faire de plusieurs mani√®res diff√©rentes. J'ai choisi l'approche de faire le moins de modification possible dans le code actuel (pour les *strikes* et les *spares*, il aurait √©t√© possible de calculer directement 10).\n\nIci, nous allons calculer la somme d'un lancer dans le cas d'un strike et la somme de deux lancers dans les autres cas.\n\nMettons en √©vidence le concept de score li√© √† la frame : \n\n```diff\n\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n+   int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   frameScore = rolls.get(frameIndex); // roll 1\n+   frameScore += rolls.get(frameIndex + 1); // roll 2\n-   score += rolls.get(frameIndex); // roll 1\n-   score += rolls.get(frameIndex + 1); // roll 2\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 3\n+   frameScore += rolls.get(frameIndex + 1); // roll 4\n-   score += rolls.get(frameIndex); // roll 3\n-   score += rolls.get(frameIndex + 1); // roll 4\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 5\n+   frameScore += rolls.get(frameIndex + 1); // roll 6 (spare)\n-   score += rolls.get(frameIndex); // roll 5\n-   score += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 7\n+   frameScore += rolls.get(frameIndex + 1); // roll 8\n-   score += rolls.get(frameIndex); // roll 7\n-   score += rolls.get(frameIndex + 1); // roll 8\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 9\n+   frameScore += rolls.get(frameIndex + 1); // roll 10\n-   score += rolls.get(frameIndex); // roll 9\n-   score += rolls.get(frameIndex + 1); // roll 10\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 11\n+   frameScore += rolls.get(frameIndex + 1); // roll 12\n-   score += rolls.get(frameIndex); // roll 11\n-   score += rolls.get(frameIndex + 1); // roll 12\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 13\n+   frameScore += rolls.get(frameIndex + 1); // roll 14 (spare)\n-   score += rolls.get(frameIndex); // roll 13\n-   score += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+       frameScore = rolls.get(frameIndex); // roll 15 (strike)\n-   score += rolls.get(frameIndex); // roll 15 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   frameScore = rolls.get(frameIndex); // roll 16\n+   frameScore += rolls.get(frameIndex + 1); // roll 17\n-   score += rolls.get(frameIndex); // roll 16\n-   score += rolls.get(frameIndex + 1); // roll 17\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   frameScore = rolls.get(frameIndex); // roll 18 (strike)\n-   score += rolls.get(frameIndex); // roll 18 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n+   score += frameScore + bonus;\n-   score += bonus;\n\n    return score;\n}\n```\n\nEnsuite, on met en √©vidence la duplication : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 1\n-   frameScore += rolls.get(frameIndex + 1); // roll 2\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 3\n-   frameScore += rolls.get(frameIndex + 1); // roll 4\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 5\n-   frameScore += rolls.get(frameIndex + 1); // roll 6 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 7\n-   frameScore += rolls.get(frameIndex + 1); // roll 8\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 9\n-   frameScore += rolls.get(frameIndex + 1); // roll 10\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 11\n-   frameScore += rolls.get(frameIndex + 1); // roll 12\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 13\n-   frameScore += rolls.get(frameIndex + 1); // roll 14 (spare)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 15 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   if (rolls.get(frameIndex) == 10) {\n+       frameScore = rolls.get(frameIndex);\n+   } else {\n+       frameScore = rolls.get(frameIndex);\n+       frameScore += rolls.get(frameIndex + 1);\n+   }\n-   frameScore = rolls.get(frameIndex); // roll 18 (strike)\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n```\n\nPuis on la supprimons avec un [[wiki/extract method |extract method]] : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n    frameIndex = frameIndex + 1;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n    frameIndex = frameIndex + 2;\n+   frameScore = calculateFrameScore(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameScore = rolls.get(frameIndex);\n-   } else {\n-       frameScore = rolls.get(frameIndex);\n-       frameScore += rolls.get(frameIndex + 1);\n-   }\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n+private int calculateFrameScore(int frameIndex) {  \n+    int frameScore;  \n+    if (rolls.get(frameIndex) == 10) {  \n+        frameScore = rolls.get(frameIndex);  \n+    } else {  \n+        frameScore = rolls.get(frameIndex);  \n+        frameScore += rolls.get(frameIndex + 1);  \n+    }  \n+    return frameScore;  \n+}+\n\n```\n\n\u003e Dev : Il reste encore un concept, l'indice de la prochaine frame. C'est √ßa ?\n\u003e Moi : Tout √† fait. Tu commences √† comprendre :)\n\u003e Dev : Alors, le concept existe d√©j√†, on va donc mettre en √©vidence la duplication puis la supprimer avec un extract method.\n\u003e Moi : Bingo ! \n\nVoil√† la mise en √©vidence : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n\tframeIndex = 0;\n\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 1;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n+   if (rolls.get(frameIndex) == 10) {\n+       frameIndex = frameIndex + 1;\n+   } else {\n+       frameIndex = frameIndex + 2;\n+   }\n-   frameIndex = frameIndex + 2;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n```\n\nEt la suppression avec un [[wiki/extract method|extract method]] : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n    frameIndex = 0;\n\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 2\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 3\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 4\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 5\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 6\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 7\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 8\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    // frame 9\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n\n    // frame 10\n+   frameIndex = nextFrame(frameIndex);\n-   if (rolls.get(frameIndex) == 10) {\n-       frameIndex = frameIndex + 1;\n-   } else {\n-       frameIndex = frameIndex + 2;\n-   }\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n\n    return score;\n}\n\n+private int nextFrame(int frameIndex) {\n+    if (rolls.get(frameIndex) == 10) {\n+        frameIndex = frameIndex + 1;\n+    } else {\n+        frameIndex = frameIndex + 2;\n+    }\n+    return frameIndex;\n+}\n```\n\n\u003e Dev : Et maintenant, la boucle !!!!!\n\u003e Moi : Presque, il y a encore une chose qui ne colle pas.\n\u003e Dev : ???\n\u003e Moi : Tous les blocs de codes sont identiques, sauf pour le frame 1\n\u003e Dev : Oui, c'est vrai, on n'a qu'√† faire un cas particulier pour ce bloc.\n\u003e Moi : Ou alors, on l'aligne avec les autres \n\u003e Dev : ???\n\u003e Moi : Tu vas voir\n\nPour rendre le code identique, on supprime tout simplement l'initialisation de `frameIndex` qui est d√©j√† fait (on aurait pu la supprimer depuis longtemps).\n\nEnsuite, sans cette initialisation, il n'y a pas de calcul de `frameIndex` dans le premier bloc, on d√©place donc le calcul du deuxi√®me bloc pour l'associer au premier bloc. On fait ainsi pour chaque bloc.\n\nEnfin, on se rend compte que le dixi√®me bloc est diff√©rent des autres. On lui ajoute un `nextFrame` et on lance les tests pour voir si cette ligne suppl√©mentaire ne casse rien.\n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n    // frame 1\n-   frameIndex = 0;\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 2\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 3\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 4\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 5\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 6\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 7\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 8\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 9\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n\n    // frame 10\n-   frameIndex = nextFrame(frameIndex);\n    frameScore = calculateFrameScore(frameIndex);\n    bonus = calculateFrameBonus(frameIndex);\n    score += frameScore + bonus;\n+   frameIndex = nextFrame(frameIndex);\n    \n    return score;\n}\n```\n\n\u003e Dev : On peut enfin passer √† la boucle ?\n\u003e Moi : Ouiiiii ! Tous nos blocs sont identiques.\n\nNotre code traite 10 frames. On va donc utiliser un compteur qui va jusqu'√† 10 : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n    int bonus = 0;\n    int frameScore = 0;\n\n-\t// frame 1    \n+   for (int frame = 0; frame \u003c 10; frame++) {\n        frameScore = calculateFrameScore(frameIndex);\n        bonus = calculateFrameBonus(frameIndex);\n        score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n+   }\n-   // frame 2\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 3\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 4\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 5\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 6\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 7\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 8\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 9\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n-   // frame 10\n-   frameScore = calculateFrameScore(frameIndex);\n-   bonus = calculateFrameBonus(frameIndex);\n-   score += frameScore + bonus;\n-   frameIndex = nextFrame(frameIndex);\n\n    return score;\n}\n```\n\nLa port√©e de nos variables peut √™tre diminu√©e : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n-   int bonus = 0;\n-   int frameScore = 0;\n\n    // frame 1\n    for (int frame = 0; frame \u003c 10; frame++) {\n+       int frameScore = calculateFrameScore(frameIndex);\n+       int bonus = calculateFrameBonus(frameIndex);\n-       frameScore = calculateFrameScore(frameIndex);\n-       bonus = calculateFrameBonus(frameIndex);\n        score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n    }\n\n    return score;\n}\n```\n\nLes m√©thodes sont aussi parlantes que nos variables, on peut donc les supprimer : \n\n```diff\npublic int score() {\n    int score = 0;\n    int frameIndex = 0;\n\n    // frame 1\n    for (int frame = 0; frame \u003c 10; frame++) {\n+       score += calculateFrameScore(frameIndex) + calculateFrameBonus(frameIndex);\n-       int frameScore = calculateFrameScore(frameIndex);\n-       int bonus = calculateFrameBonus(frameIndex);\n-       score += frameScore + bonus;\n        frameIndex = nextFrame(frameIndex);\n    }\n\n    return score;\n}\n```\n\nOn peut simplifier la lecture en introduisant les concepts de strike et de spare : \n\n```diff\nprivate int nextFrame(int frameIndex) {\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        frameIndex = frameIndex + 1;\n    } else {\n        frameIndex = frameIndex + 2;\n    }\n    return frameIndex;\n}\n\nprivate int calculateFrameScore(int frameIndex) {\n    int frameScore;\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        frameScore = rolls.get(frameIndex);\n    } else {\n        frameScore = rolls.get(frameIndex);\n        frameScore += rolls.get(frameIndex + 1);\n    }\n    return frameScore;\n}\n\npublic int calculateFrameBonus(int frameIndex) {\n    int bonus = 0;\n+   if (isStrike(frameIndex)) {\n-   if (rolls.get(frameIndex) == 10) {\n        bonus = rolls.get(frameIndex + 1);\n        bonus += rolls.get(frameIndex + 2);\n    } else if (isSpare(frameIndex))\n-   } else if (rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10)\n        bonus = rolls.get(frameIndex + 2);\n    else\n        bonus = 0;\n    return bonus;\n+}\n\n+private boolean isSpare(int frameIndex) {\n+    return rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10;\n+}\n\n+private boolean isStrike(int frameIndex) {\n+   return rolls.get(frameIndex) == 10;\n+}\n```\n\nEt voil√† ! Nous pourrions encore faire du refactoring, mais ce code fonctionne et je le trouve satisfaisant pour l'exercice.\n\n## La classe Bowling : \n```java\npublic class Bowling {  \n    List\u003cInteger\u003e rolls = new ArrayList\u003c\u003e();  \n  \n    public void roll(int pins) {  \n        rolls.add(pins);  \n    }  \n  \n    public int score() {  \n        int score = 0;  \n        int frameIndex = 0;  \n  \n        // frame 1  \n        for (int frame = 0; frame \u003c 10; frame++) {  \n            score += calculateFrameScore(frameIndex) + calculateFrameBonus(frameIndex);  \n            frameIndex = nextFrame(frameIndex);  \n        }  \n  \n        return score;  \n    }  \n  \n    private int nextFrame(int frameIndex) {  \n        if (isStrike(frameIndex)) {\n            frameIndex = frameIndex + 1;  \n        } else {  \n            frameIndex = frameIndex + 2;  \n        }  \n        return frameIndex;  \n    }  \n  \n    private int calculateFrameScore(int frameIndex) {  \n        int frameScore;  \n        if (isStrike(frameIndex)) {  \n            frameScore = rolls.get(frameIndex);  \n        } else {  \n            frameScore = rolls.get(frameIndex);  \n            frameScore += rolls.get(frameIndex + 1);  \n        }  \n        return frameScore;  \n    }  \n  \n    public int calculateFrameBonus(int frameIndex) {  \n        int bonus = 0;  \n        if (isStrike(frameIndex)) {  \n            bonus = rolls.get(frameIndex + 1);  \n            bonus += rolls.get(frameIndex + 2);  \n        } else if (isSpare(frameIndex))  \n            bonus = rolls.get(frameIndex + 2);  \n        else\n            bonus = 0;  \n        return bonus;  \n    }  \n  \n    private boolean isSpare(int frameIndex) {  \n        return rolls.get(frameIndex) + rolls.get(frameIndex + 1) == 10;  \n    }  \n  \n    private boolean isStrike(int frameIndex) {  \n        return rolls.get(frameIndex) == 10;  \n    }  \n}\n```","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/blog/rust-je-narrive-pas-%C3%A0-acc%C3%A9der-%C3%A0-mon-crate-dans-mes-tests":{"title":"Rust - je n'arrive pas √† acc√©der √† mon crate dans mes tests","content":"## Le probl√®me\n\nJ'ai l'habitude d'√©crire mon code de production dans les fichiers de tests au d√©part. Mais lorsque j'ai voulu d√©placer ce code dans le r√©pertoire `src`, les diff√©rents modules n'√©taient plus accessible dans les fichiers de test.\n\n## Que s'est-il pass√© ?\n\nTout simplement, j'ai cr√©√© mon projet pour que ce soit un binaire, et j'ai cr√©√© le fichier `lib.rs` un peu plus tard pour y mettre mon code.\n\nLes derniers projets sur lesquels j'ai travaill√© ne contenaient pas de fichier `main.rs` et tout fonctionnait. Mais lorsque les deux fichiers sont pr√©sents, rust ne sait pas ce qu'il faut faire.\n\n## La solution\nJ'ai modifi√© le fichier `cargo.toml` pour y ajouter ce bout de code (sachant que je souhaite que mon binaire et mon crate s'appelle todolist) : \n\n```toml\n[bin]  \nname = \"todolist\"  \npath = \"src/main.rs\"  \n  \n[lib]  \nname = \"todolist\"  \npath = \"src/lib.rs\"\n```\n\nSi jamais le module lib est un r√©pertoire, on peut indiquer `src/lib/mod.rs` dans le `path`.\n\nGr√¢ce √† cela, j'ai pu de nouveau ex√©cuter mes tests.\n\n## Reference\nhttps://stackoverflow.com/questions/57756927/rust-modules-confusion-when-there-is-main-rs-and-lib-rs","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/kata/bowling":{"title":"Bowling","content":"R√®gles du bowling\n- 10 carreaux (frame en anglais)\n- 2 lanc√©s par carreaux (roll en anglais)\n- on ajoute au score le nombre de quilles tomb√©s lors du carreau (pin en anglais)\n- un abat se produit lorsqu'on fait tomber les 10 quilles au premier lancer du carreau (strike en anglais)\n- lors d'un abat, on ajoute en bonus le nombre de quilles tomb√©es lors des deux prochains lancers\n- une r√©serve se produit lorsqu'on fait les 10 quilles au second lancer du carreau (spare en anglais)\n- lors d'une r√©serve, on ajoute en bonus le nombre de quilles tomb√©es lors du prochain lancer\n- si l'on fait un abat lors du dixi√®me carreau, on a deux lancers suppl√©mentaires pour calculer le bonus\n- si l'on fait une r√©serve lors du dixi√®me carreau, on a un lancer suppl√©mentaire pour calculer le bonus\n\n## Reference","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (ÊµãËØï)","content":"## Chinese, Japanese, Korean Support\nÂá†‰πéÂú®Êàë‰ª¨ÊÑèËØÜÂà∞‰πãÂâçÔºåÊàë‰ª¨Â∑≤ÁªèÁ¶ªÂºÄ‰∫ÜÂú∞Èù¢„ÄÇ\n\nÏö∞Î¶¨Í∞Ä Í∑∏Í≤ÉÏùÑ ÏïåÍ∏∞ÎèÑ Ï†ÑÏóê Ïö∞Î¶¨Îäî ÎïÖÏùÑ Îñ†ÎÇ¨ÏäµÎãàÎã§.\n\nÁßÅ„Åü„Å°„Åå„Åù„Çå„ÇíÁü•„Çã„Åª„ÅºÂâç„Å´„ÄÅÁßÅ„Åü„Å°„ÅØÂú∞Èù¢„ÇíÈõ¢„Çå„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/config":{"title":"Configuration","content":"## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml\nname: Your name here! # Shows in the footer\nenableToc: true # Whether to show a Table of Contents\nenableLinkPreview: true # whether to render card previews for links\ndescription: Page description to show to search engines\npage_title: Quartz Example Page # Default Page Title\n\nlinks: # Links to show in footer\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml\nenableLegend: false # automatically generate a legend\nenableDrag: true # allow dragging nodes in the graph\nenableZoom: true # allow zooming and panning the graph\ndepth: -1 # how many neighbours of the current node to show (-1 is all nodes)\npaths: # colour specific nodes path off of their path\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what actually gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Multilingual\n[CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'ŸÖÿØŸàŸÜÿ™Ÿä'\n    weight = 1\n```","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"---\n\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\nüîó [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n‚ùå [Excluding pages from being published](notes/ignore%20notes.md)\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.*\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```markdown","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"---\n\n## GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`.\n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`.\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"---\n\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown","lastmodified":"2022-05-04T06:37:30.212333337Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always e Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recomment `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\u003e ‚Äú[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.‚Äù ‚Äî Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"If you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```shell\n# Install and link `hugo-obsidian` locally\n$ go install github.com/jackyzha0/hugo-obsidian@latest\n\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Scrape all links in your Quartz folder and generate info for Quartz\n$ hugo-obsidian -input=content -output=assets/indices -index -root=.\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\n$ hugo server\n\n# View your site in a browser at http://localhost:1313/\n```","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/notes/setup":{"title":"Setup","content":"## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\nüìÅ [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\n$ git clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n‚úèÔ∏è [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Updating\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n\n# or, if you don't want the interactive parts and just want the update\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e ‚ö†Ô∏è **WARNING** ‚ö†Ô∏è\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"Want to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://garden.jzhao.xyz/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\nüêõ [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/DDD":{"title":"Domain Driven Design (DDD)","content":"","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/TDD":{"title":"TDD","content":"","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/architecture-hexagonale":{"title":"architecture hexagonale","content":"","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/event-sourcing":{"title":"event sourcing","content":"","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/extract-method":{"title":"extract method","content":"## Reference\n- https://refactoring.guru/fr/extract-method","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/extract-parameter":{"title":"extract parameter","content":"## Reference","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/extract-variable":{"title":"Extract variable","content":"## R√©f√©rence\nhttps://refactoring.guru/fr/extract-variable","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/inline-variable":{"title":"inline variable","content":"## Reference\n* https://refactoring.guru/fr/inline-temp","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null},"/wiki/rust":{"title":"rust","content":"","lastmodified":"2022-05-04T06:37:30.216333361Z","tags":null}}